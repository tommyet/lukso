{
  "address": "0xe5446bd554552a04861acaafae8c62c4449AA63d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isNFT",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LSP4TokenNameNotEditable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LSP4TokenSymbolNotEditable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "authorizedAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LSP7AmountExceedsAuthorizedAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LSP7AmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LSP7CannotSendWithAddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LSP7CannotUseAddressZeroAsOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LSP7InvalidTransferBatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenReceiver",
          "type": "address"
        }
      ],
      "name": "LSP7NotifyTokenReceiverContractMissingLSP1Interface",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenReceiver",
          "type": "address"
        }
      ],
      "name": "LSP7NotifyTokenReceiverIsEOA",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuthorizedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        }
      ],
      "name": "DataChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        }
      ],
      "name": "RevokedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "authorizeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "createComment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "createPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "deletePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "editPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "fetchComments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "commentor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct ForumNFT.Comment[]",
          "name": "comments",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "fetchLikes",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "likes",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchPosts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "author",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "likes",
              "type": "address[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "cid",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "commentor",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ForumNFT.Comment[]",
              "name": "comments",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "internalType": "struct ForumNFT.Post[]",
          "name": "posts",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "dataKeys",
          "type": "bytes32[]"
        }
      ],
      "name": "getData",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "dataValues",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        }
      ],
      "name": "getData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "dataValue",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        }
      ],
      "name": "isOperatorFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "like",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postByTokenId",
      "outputs": [
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postsIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commentId",
          "type": "uint256"
        }
      ],
      "name": "removeComment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "revokeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "dataKeys",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "dataValues",
          "type": "bytes[]"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataKey",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "dataValue",
          "type": "bytes"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "from",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amount",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "transferBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ff3b62c8e35da407117fc27c1c04952e1e34f4c36fefd90224cc4f783916387",
  "receipt": {
    "to": null,
    "from": "0xE3ec5B98dDe4967635E2198E9269A576904592B8",
    "contractAddress": "0xe5446bd554552a04861acaafae8c62c4449AA63d",
    "transactionIndex": 0,
    "gasUsed": "4944768",
    "logsBloom": "0x
    "blockHash": "0x37fd50e1f4bbbee24141982e0585c82b9a3910525545b744d5f82399221bdcf7",
    "transactionHash": "0x6ff3b62c8e35da407117fc27c1c04952e1e34f4c36fefd90224cc4f783916387",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 689681,
        "transactionHash": "0x6ff3b62c8e35da407117fc27c1c04952e1e34f4c36fefd90224cc4f783916387",
        "address": "0xe5446bd554552a04861acaafae8c62c4449AA63d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000ced2afbb9d4d9023059b2f7cc07f24c4058cf30"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x37fd50e1f4bbbee24141982e0585c82b9a3910525545b744d5f82399221bdcf7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 689681,
        "transactionHash": "0x6ff3b62c8e35da407117fc27c1c04952e1e34f4c36fefd90224cc4f783916387",
        "address": "0xe5446bd554552a04861acaafae8c62c4449AA63d",
        "topics": [
          "0xcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b",
          "0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x37fd50e1f4bbbee24141982e0585c82b9a3910525545b744d5f82399221bdcf7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 689681,
        "transactionHash": "0x6ff3b62c8e35da407117fc27c1c04952e1e34f4c36fefd90224cc4f783916387",
        "address": "0xe5446bd554552a04861acaafae8c62c4449AA63d",
        "topics": [
          "0xcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b",
          "0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x37fd50e1f4bbbee24141982e0585c82b9a3910525545b744d5f82399221bdcf7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 689681,
        "transactionHash": "0x6ff3b62c8e35da407117fc27c1c04952e1e34f4c36fefd90224cc4f783916387",
        "address": "0xe5446bd554552a04861acaafae8c62c4449AA63d",
        "topics": [
          "0xcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b",
          "0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x37fd50e1f4bbbee24141982e0585c82b9a3910525545b744d5f82399221bdcf7"
      }
    ],
    "blockNumber": 689681,
    "cumulativeGasUsed": "4944768",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "LuksoForum",
    "LYXtForum",
    "0x0CEd2afBb9d4d9023059b2F7Cc07f24C4058CF30",
    false
  ],
  "numDeployments": 1,
  "solcInputHash": "0f926716784cdb665088b48ba3ce0d86",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isNFT\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LSP4TokenNameNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenSymbolNotEditable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"authorizedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LSP7AmountExceedsAuthorizedAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LSP7AmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7CannotSendWithAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7CannotUseAddressZeroAsOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP7InvalidTransferBatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP7NotifyTokenReceiverContractMissingLSP1Interface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP7NotifyTokenReceiverIsEOA\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"createComment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"createPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deletePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"editPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"fetchComments\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"commentor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct ForumNFT.Comment[]\",\"name\":\"comments\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"fetchLikes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"likes\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchPosts\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"likes\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"commentor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct ForumNFT.Comment[]\",\"name\":\"comments\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct ForumNFT.Post[]\",\"name\":\"posts\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"like\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postByTokenId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postsIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentId\",\"type\":\"uint256\"}],\"name\":\"removeComment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"LSP4TokenNameNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed.      The `LSP4TokenName` data key is located inside the ERC725Y key-value store of the digital asset contract.      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed.\"}],\"LSP4TokenSymbolNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed.      The `LSP4TokenSymbol` data key is located inside the ERC725Y key-value store of the digital asset contract.      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed.\"}]},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,uint256)\":{\"details\":\"Sets `amount` as the amount of tokens `operator` address has access to from callers tokens. See {isOperatorFor}. Requirements - `operator` cannot be the zero address. Emits an {AuthorizedOperator} event.\",\"params\":{\"amount\":\"The amount of tokens operator has access to.\",\"operator\":\"The address to authorize as an operator.\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens owned by `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The address to query\"},\"returns\":{\"_0\":\"The number of tokens owned by this address\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation If the contract represents a NFT then 0 SHOULD be used, otherwise 18 is the common value NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {balanceOf} and {transfer}.\"},\"getData(bytes32)\":{\"params\":{\"dataKey\":\"The key which value to retrieve\"},\"returns\":{\"dataValue\":\"The data stored at the key\"}},\"getData(bytes32[])\":{\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"isOperatorFor(address,address)\":{\"details\":\"Returns amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners. The tokenOwner is their own operator.\",\"params\":{\"operator\":\"The address to query operator status for.\",\"tokenOwner\":\"The token owner.\"},\"returns\":{\"_0\":\"The amount of tokens `operator` address has access to from `tokenOwner`.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeOperator(address)\":{\"details\":\"Removes `operator` address as an operator of callers tokens. See {isOperatorFor}. Requirements - `operator` cannot be the zero address. Emits a {RevokedOperator} event.\",\"params\":{\"operator\":\"The address to revoke as an operator.\"}},\"setData(bytes32,bytes)\":{\"params\":{\"dataKey\":\"The key to retrieve stored value\",\"dataValue\":\"The value to set SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.\"}},\"setData(bytes32[],bytes[])\":{\"details\":\"Sets array of data for multiple given `dataKeys` SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.\",\"params\":{\"dataKeys\":\"The array of data keys for values to set\",\"dataValues\":\"The array of values to set\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens.\",\"returns\":{\"_0\":\"The number of existing tokens\"}},\"transfer(address,address,uint256,bool,bytes)\":{\"details\":\"Transfers `amount` of tokens from `from` to `to`. The `force` parameter will be used when notifying the token sender and receiver. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `amount` tokens must be owned by `from`. - If the caller is not `from`, it must be an operator for `from` with access to at least `amount` tokens. Emits a {Transfer} event.\",\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"data\":\"Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\",\"force\":\"When set to TRUE, to may be any address but when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\",\"from\":\"The sending address.\",\"to\":\"The receiving address.\"}},\"transferBatch(address[],address[],uint256[],bool,bytes[])\":{\"details\":\"Transfers many tokens based on the list `from`, `to`, `amount`. If any transfer fails the call will revert. Requirements: - `from`, `to`, `amount` lists are the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `amount` tokens must be owned by `from`. - If the caller is not `from`, it must be an operator for `from` with access to at least `amount` tokens. Emits {Transfer} events.\",\"params\":{\"amount\":\"The amount of tokens to transfer.\",\"data\":\"Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\",\"force\":\"When set to TRUE, to may be any address but when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\",\"from\":\"The list of sending addresses.\",\"to\":\"The list of receiving addresses.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"DataChanged(bytes32)\":{\"notice\":\"Emitted when data at a key is changed\"}},\"kind\":\"user\",\"methods\":{\"getData(bytes32)\":{\"notice\":\"Gets singular data at a given `dataKey`\"},\"getData(bytes32[])\":{\"notice\":\"Gets array of data for multiple given keys\"},\"setData(bytes32,bytes)\":{\"notice\":\"Sets singular data for a given `dataKey`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ForumNFT.sol\":\"ForumNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@erc725/smart-contracts/contracts/ERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\nimport {ERC725YCore} from \\\"./ERC725YCore.sol\\\";\\n\\n/**\\n * @title ERC725Y General data key/value store\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev Contract module which provides the ability to set arbitrary data key/value pairs that can be changed over time\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes\\n * from/to the contract storage\\n */\\ncontract ERC725Y is ERC725YCore {\\n    /**\\n     * @notice Sets the owner of the contract\\n     * @param newOwner the owner of the contract\\n     */\\n    constructor(address newOwner) {\\n        OwnableUnset._setOwner(newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe3947b1958d2a90ce0a41ce7635112f4baf24b9ad6e0a8e0d60178d7edb0355d\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/ERC725YCore.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// libraries\\nimport {GasLib} from \\\"./utils/GasLib.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {OwnableUnset} from \\\"./custom/OwnableUnset.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\n/**\\n * @title Core implementation of ERC725Y General data key/value store\\n * @author Fabian Vogelsteller <fabian@lukso.network>\\n * @dev Contract module which provides the ability to set arbitrary data key/value pairs that can be changed over time\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes\\n * from/to the contract storage\\n */\\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\\n    /**\\n     * @dev Map the dataKeys to their dataValues\\n     */\\n    mapping(bytes32 => bytes) internal store;\\n\\n    /* Public functions */\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(bytes32 dataKey)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes memory dataValue)\\n    {\\n        dataValue = _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(bytes32[] memory dataKeys)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes[] memory dataValues)\\n    {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; i = GasLib.uncheckedIncrement(i)) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) public virtual override onlyOwner {\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function setData(bytes32[] memory dataKeys, bytes[] memory dataValues)\\n        public\\n        virtual\\n        override\\n        onlyOwner\\n    {\\n        require(dataKeys.length == dataValues.length, \\\"Keys length not equal to values length\\\");\\n        for (uint256 i = 0; i < dataKeys.length; i = GasLib.uncheckedIncrement(i)) {\\n            _setData(dataKeys[i], dataValues[i]);\\n        }\\n    }\\n\\n    /* Internal functions */\\n\\n    function _getData(bytes32 dataKey) internal view virtual returns (bytes memory dataValue) {\\n        return store[dataKey];\\n    }\\n\\n    function _setData(bytes32 dataKey, bytes memory dataValue) internal virtual {\\n        store[dataKey] = dataValue;\\n        emit DataChanged(dataKey);\\n    }\\n\\n    /* Overrides functions */\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == _INTERFACEID_ERC725Y || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x4fa686a57bcfc6968ec827dbb655f03e4c8baa54c4b363bc2273ca8f4923bf36\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// >> ERC165 INTERFACE IDs\\n\\n// ERC725 - Smart Contract based Account\\nbytes4 constant _INTERFACEID_ERC725X = 0x44c028fe;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x714df77c;\\n\\n// >> ERC725X OPERATIONS TYPES\\nuint256 constant OPERATION_CALL = 0;\\nuint256 constant OPERATION_CREATE = 1;\\nuint256 constant OPERATION_CREATE2 = 2;\\nuint256 constant OPERATION_STATICCALL = 3;\\nuint256 constant OPERATION_DELEGATECALL = 4;\\n\\n// ERC725Y overloaded function selectors\\nbytes4 constant SETDATA_SELECTOR = bytes4(keccak256(\\\"setData(bytes32,bytes)\\\"));\\nbytes4 constant SETDATA_ARRAY_SELECTOR = bytes4(keccak256(\\\"setData(bytes32[],bytes[])\\\"));\\n\",\"keccak256\":\"0xdf3d466e2d6f8d0f2e288ee01edb0cf7de2db9cac3c257b7d6a6284adf4b2480\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts/contracts/custom/OwnableUnset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OwnableUnset\\n * @dev modified version of OpenZeppelin implementation, where:\\n * - _setOwner(address) function is internal, so this function can be used in constructor\\n * of contracts implementation (instead of using transferOwnership(address)\\n * - the contract does not inherit from Context contract\\n */\\nabstract contract OwnableUnset {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Changes the owner if `newOwner` and oldOwner are different\\n     * This pattern is useful in inheritance.\\n     */\\n    function _setOwner(address newOwner) internal virtual {\\n        if (newOwner != owner()) {\\n            address oldOwner = _owner;\\n            _owner = newOwner;\\n            emit OwnershipTransferred(oldOwner, newOwner);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe77afcd7d2496c79578ff7f219c0fad901fa4e0421f9ba389eb5f5eb7d9f1dcf\",\"license\":\"MIT\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y General data key/value store\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes\\n * from/to the contract storage\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice Emitted when data at a key is changed\\n     * @param dataKey The data key which value is set\\n     */\\n    event DataChanged(bytes32 indexed dataKey);\\n\\n    /**\\n     * @notice Gets singular data at a given `dataKey`\\n     * @param dataKey The key which value to retrieve\\n     * @return dataValue The data stored at the key\\n     */\\n    function getData(bytes32 dataKey) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Gets array of data for multiple given keys\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getData(bytes32[] memory dataKeys) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets singular data for a given `dataKey`\\n     * @param dataKey The key to retrieve stored value\\n     * @param dataValue The value to set\\n     * SHOULD only be callable by the owner of the contract set via ERC173\\n     *\\n     * Emits a {DataChanged} event.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external;\\n\\n    /**\\n     * @param dataKeys The array of data keys for values to set\\n     * @param dataValues The array of values to set\\n     * @dev Sets array of data for multiple given `dataKeys`\\n     * SHOULD only be callable by the owner of the contract set via ERC173\\n     *\\n     * Emits a {DataChanged} event.\\n     */\\n    function setData(bytes32[] memory dataKeys, bytes[] memory dataValues) external;\\n}\\n\",\"keccak256\":\"0x88a85aac90cb593ef4366d0ffbac4d05a06fa8b875727350ae91237f9192c4a2\",\"license\":\"CC0-1.0\"},\"@erc725/smart-contracts/contracts/utils/GasLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library to add all efficient functions that could get repeated.\\n */\\nlibrary GasLib {\\n    /**\\n     * @dev Will return unchecked incremented uint256\\n     */\\n    function uncheckedIncrement(uint256 i) internal pure returns (uint256) {\\n        unchecked {\\n            return i + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe14b9134f285d02fcf967caaa6a0566c8e9e8197a9ed190021e310bd4b7fc6c7\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/Custom/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// This contract is a modified version of OpenZeppelin implementation, where we modify the visibility of\\n// `supportsERC165Interface`, which check the given interfaceId, to internal and to be used in contract implementations,\\n// instead of `supportsInterface` to save gas, as the latter check for 3 interfaceIds; InterfaceId of ERC165, 0xffffffff\\n// and the given interfaceId.\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165Interface(address account, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes memory encodedParams = abi.encodeWithSelector(\\n            IERC165.supportsInterface.selector,\\n            interfaceId\\n        );\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0x076fb61a330055d96723ad73383629e0ff2e5f903b2ba67e323318ef2e78ec7c\",\"license\":\"MIT\"},\"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title The interface for LSP1UniversalReceiver\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @notice Emitted when the universalReceiver function is succesfully executed\\n     * @param from The address calling the universalReceiver function\\n     * @param value The amount sent to the universalReceiver function\\n     * @param typeId The hash of a specific standard or a hook\\n     * @param returnedValue The return value of universalReceiver function\\n     * @param receivedData The arbitrary data passed to universalReceiver function\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 value,\\n        bytes32 indexed typeId,\\n        bytes indexed returnedValue,\\n        bytes receivedData\\n    );\\n\\n    /**\\n     * @param typeId The hash of a specific standard or a hook\\n     * @param data The arbitrary data received with the call\\n     * @dev Emits an event when it's succesfully executed\\n     *\\n     * Call the universalReceiverDelegate function in the UniversalReceiverDelegate (URD) contract, if the address of the URD\\n     * was set as a value for the `_UniversalReceiverKey` in the account key/value value store of the same contract implementing\\n     * the universalReceiver function and if the URD contract has the LSP1UniversalReceiverDelegate Interface Id registred using ERC165\\n     *\\n     * Emits a {UniversalReceiver} event\\n     */\\n    function universalReceiver(bytes32 typeId, bytes calldata data)\\n        external\\n        payable\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xbca7d0f76e439ee3302096f8ecaf8a506434a83c86639c95efd79e6b89d364ae\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Keys\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x37255dac370701b20dc046c41024686ccf5a88eb1e68415c30167015f6f80f17\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap')) + bytes2(0)\\nbytes12 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da00000;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xbc21e90a3ac55241317693a108ee1cd4507f56d48afceacd151c3f8e2d625e62\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4DigitalAssetMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// modules\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\n\\n// constants\\nimport \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {LSP4TokenNameNotEditable, LSP4TokenSymbolNotEditable} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title LSP4DigitalAssetMetadata\\n * @author Matthew Stevens\\n * @dev Implementation of a LSP8 compliant contract.\\n */\\nabstract contract LSP4DigitalAssetMetadata is ERC725Y {\\n    /**\\n     * @notice Sets the name, symbol of the token and the owner, and sets the SupportedStandards:LSP4DigitalAsset key\\n     * @param name_ The name of the token\\n     * @param symbol_ The symbol of the token\\n     * @param newOwner_ The owner of the token contract\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_\\n    ) ERC725Y(newOwner_) {\\n        // set key SupportedStandards:LSP4DigitalAsset\\n        super._setData(_LSP4_SUPPORTED_STANDARDS_KEY, _LSP4_SUPPORTED_STANDARDS_VALUE);\\n\\n        super._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\\n        super._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\\n    }\\n\\n    /**\\n     * @dev the ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed via this function\\n     *      once the digital asset contract has been deployed\\n     */\\n    function _setData(bytes32 key, bytes memory value) internal virtual override {\\n        if (key == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (key == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else {\\n            super._setData(key, value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x54e8bf475e232597547d1107b56a88333fc74736b73fb44a59db79369feb6ab5\",\"license\":\"MIT\"},\"@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed.\\n *      The `LSP4TokenName` data key is located inside the ERC725Y key-value store of the digital asset contract.\\n *      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed.\\n *      The `LSP4TokenSymbol` data key is located inside the ERC725Y key-value store of the digital asset contract.\\n *      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\",\"keccak256\":\"0x6f3e16b05e193aa5725c3d8413be2ec356ad1713943bb1c3cbb08e8bcaf07685\",\"license\":\"Apache-2.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/ILSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC725Y} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @dev Required interface of a LSP8 compliant contract.\\n */\\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `amount` tokens is transferred from `from` to `to`.\\n     * @param operator The address of operator sending tokens\\n     * @param from The address which tokens are sent\\n     * @param to The receiving address\\n     * @param amount The amount of tokens transferred\\n     * @param force When set to TRUE, `to` may be any address but\\n     * when set to FALSE `to` must be a contract that supports LSP1 UniversalReceiver\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses\\n     */\\n    event Transfer(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\\n     * @param operator The address authorized as an operator\\n     * @param tokenOwner The token owner\\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\\n     */\\n    event AuthorizedOperator(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens.\\n     * @param operator The address revoked from operating\\n     * @param tokenOwner The token owner\\n     */\\n    event RevokedOperator(address indexed operator, address indexed tokenOwner);\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation\\n     * If the contract represents a NFT then 0 SHOULD be used, otherwise 18 is the common value\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {balanceOf} and {transfer}.\\n     */\\n    function decimals() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of existing tokens.\\n     * @return The number of existing tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Returns the number of tokens owned by `tokenOwner`.\\n     * @param tokenOwner The address to query\\n     * @return The number of tokens owned by this address\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @param operator The address to authorize as an operator.\\n     * @param amount The amount of tokens operator has access to.\\n     * @dev Sets `amount` as the amount of tokens `operator` address has access to from callers tokens.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be the zero address.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     */\\n    function authorizeOperator(address operator, uint256 amount) external;\\n\\n    /**\\n     * @param operator The address to revoke as an operator.\\n     * @dev Removes `operator` address as an operator of callers tokens.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be the zero address.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @param operator The address to query operator status for.\\n     * @param tokenOwner The token owner.\\n     * @return The amount of tokens `operator` address has access to from `tokenOwner`.\\n     * @dev Returns amount of tokens `operator` address has access to from `tokenOwner`.\\n     * Operators can send and burn tokens on behalf of their owners. The tokenOwner is their own\\n     * operator.\\n     */\\n    function isOperatorFor(address operator, address tokenOwner) external view returns (uint256);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @param from The sending address.\\n     * @param to The receiving address.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to TRUE, to may be any address but\\n     * when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @dev Transfers `amount` of tokens from `from` to `to`. The `force` parameter will be used\\n     * when notifying the token sender and receiver.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `amount` tokens must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\\n     * `amount` tokens.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @param from The list of sending addresses.\\n     * @param to The list of receiving addresses.\\n     * @param amount The amount of tokens to transfer.\\n     * @param force When set to TRUE, to may be any address but\\n     * when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @dev Transfers many tokens based on the list `from`, `to`, `amount`. If any transfer fails\\n     * the call will revert.\\n     *\\n     * Requirements:\\n     *\\n     * - `from`, `to`, `amount` lists are the same length.\\n     * - no values in `from` can be the zero address.\\n     * - no values in `to` can be the zero address.\\n     * - each `amount` tokens must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\\n     * `amount` tokens.\\n     *\\n     * Emits {Transfer} events.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool force,\\n        bytes[] memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf97a6b9ccef6bf4fdca7f812e7992dfc96326563c52085a402341ba20ce2b065\",\"license\":\"MIT\"},\"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7Constants.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP7 = 0xe33f65c3;\\n\\n// --- Token Hooks\\n\\n// keccak256('LSP7TokensSender')\\nbytes32 constant _TYPEID_LSP7_TOKENSSENDER = 0x40b8bec57d7b5ff0dbd9e9acd0a47dfeb0101e1a203766f5ccab00445fbf39e9;\\n\\n// keccak256('LSP7TokensRecipient')\\nbytes32 constant _TYPEID_LSP7_TOKENSRECIPIENT = 0xdbe2c314e1aee2970c72666f2ebe8933a8575263ea71e5ff6a9178e95d47a26f;\\n\",\"keccak256\":\"0x6a6665e00c970c36ffbad136eb02f70093351060906d18af04b4c56d36c11b29\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7DigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n// modules\\nimport {ERC725YCore} from \\\"@erc725/smart-contracts/contracts/ERC725YCore.sol\\\";\\nimport {LSP4DigitalAssetMetadata} from \\\"../LSP4DigitalAssetMetadata/LSP4DigitalAssetMetadata.sol\\\";\\nimport {LSP7DigitalAssetCore} from \\\"./LSP7DigitalAssetCore.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP7} from \\\"./LSP7Constants.sol\\\";\\n\\n/**\\n * @title LSP7DigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Implementation of a LSP7 compliant contract.\\n *\\n * This implementation is agnostic to the way tokens are created.\\n * A supply mechanism has to be added in a derived contract using {_mint}\\n * For a generic mechanism, see {LSP7Mintable}.\\n */\\ncontract LSP7DigitalAsset is LSP4DigitalAssetMetadata, LSP7DigitalAssetCore {\\n    /**\\n     * @notice Sets the token-Metadata\\n     * @param name_ The name of the token\\n     * @param symbol_ The symbol of the token\\n     * @param newOwner_ The owner of the the token-Metadata\\n     * @param isNFT_ Specify if the LSP7 token is a fungible or non-fungible token\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_,\\n        bool isNFT_\\n    ) LSP4DigitalAssetMetadata(name_, symbol_, newOwner_) {\\n        _isNFT = isNFT_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC725YCore)\\n        returns (bool)\\n    {\\n        return interfaceId == _INTERFACEID_LSP7 || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x826b87272b7a1a0e0831092a699bd11bfad4bf336ca0d43310e2faa8227a3e47\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7DigitalAssetCore.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {ILSP1UniversalReceiver} from \\\"../LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\\\";\\nimport {ILSP7DigitalAsset} from \\\"./ILSP7DigitalAsset.sol\\\";\\n\\n// libraries\\nimport {ERC165Checker} from \\\"../Custom/ERC165Checker.sol\\\";\\n\\n// modules\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ERC725Y} from \\\"@erc725/smart-contracts/contracts/ERC725Y.sol\\\";\\n\\n// errors\\nimport \\\"./LSP7Errors.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP1} from \\\"../LSP1UniversalReceiver/LSP1Constants.sol\\\";\\nimport {_TYPEID_LSP7_TOKENSSENDER, _TYPEID_LSP7_TOKENSRECIPIENT} from \\\"./LSP7Constants.sol\\\";\\n\\n/**\\n * @title LSP7DigitalAsset contract\\n * @author Matthew Stevens\\n * @dev Core Implementation of a LSP7 compliant contract.\\n *\\n * This contract implement the core logic of the functions for the {ILSP7DigitalAsset} interface.\\n */\\nabstract contract LSP7DigitalAssetCore is Context, ILSP7DigitalAsset {\\n    using Address for address;\\n\\n    // --- Storage\\n\\n    bool internal _isNFT;\\n\\n    uint256 internal _existingTokens;\\n\\n    // Mapping from `tokenOwner` to an `amount` of tokens\\n    mapping(address => uint256) internal _tokenOwnerBalances;\\n\\n    // Mapping a `tokenOwner` to an `operator` to `amount` of tokens.\\n    mapping(address => mapping(address => uint256)) internal _operatorAuthorizedAmount;\\n\\n    // --- Token queries\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function decimals() public view override returns (uint256) {\\n        return _isNFT ? 0 : 18;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _existingTokens;\\n    }\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function balanceOf(address tokenOwner) public view override returns (uint256) {\\n        return _tokenOwnerBalances[tokenOwner];\\n    }\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function authorizeOperator(address operator, uint256 amount) public virtual override {\\n        _updateOperator(_msgSender(), operator, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function revokeOperator(address operator) public virtual override {\\n        _updateOperator(_msgSender(), operator, 0);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function isOperatorFor(address operator, address tokenOwner)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        if (tokenOwner == operator) {\\n            return _tokenOwnerBalances[tokenOwner];\\n        } else {\\n            return _operatorAuthorizedAmount[tokenOwner][operator];\\n        }\\n    }\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) public virtual override {\\n        address operator = _msgSender();\\n        if (operator != from) {\\n            uint256 operatorAmount = _operatorAuthorizedAmount[from][operator];\\n            if (amount > operatorAmount) {\\n                revert LSP7AmountExceedsAuthorizedAmount(from, operatorAmount, operator, amount);\\n            }\\n\\n            _updateOperator(from, operator, operatorAmount - amount);\\n        }\\n\\n        _transfer(from, to, amount, force, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP7DigitalAsset\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        uint256[] memory amount,\\n        bool force,\\n        bytes[] memory data\\n    ) public virtual override {\\n        if (\\n            from.length != to.length || from.length != amount.length || from.length != data.length\\n        ) {\\n            revert LSP7InvalidTransferBatch();\\n        }\\n\\n        for (uint256 i = 0; i < from.length; i++) {\\n            // using the public transfer function to handle updates to operator authorized amounts\\n            transfer(from[i], to[i], amount[i], force, data[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes token `amount` the `operator` has access to from `tokenOwner` tokens. If the\\n     * amount is zero then the operator is being revoked, otherwise the operator amount is being\\n     * modified.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits either {AuthorizedOperator} or {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _updateOperator(\\n        address tokenOwner,\\n        address operator,\\n        uint256 amount\\n    ) internal virtual {\\n        if (operator == address(0)) {\\n            revert LSP7CannotUseAddressZeroAsOperator();\\n        }\\n\\n        // tokenOwner is always their own operator, no update required\\n        if (operator == tokenOwner) {\\n            return;\\n        }\\n\\n        _operatorAuthorizedAmount[tokenOwner][operator] = amount;\\n\\n        if (amount != 0) {\\n            emit AuthorizedOperator(operator, tokenOwner, amount);\\n        } else {\\n            emit RevokedOperator(operator, tokenOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `amount` tokens and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (to == address(0)) {\\n            revert LSP7CannotSendWithAddressZero();\\n        }\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(address(0), to, amount);\\n\\n        _tokenOwnerBalances[to] += amount;\\n\\n        emit Transfer(operator, address(0), to, amount, force, data);\\n\\n        _notifyTokenReceiver(address(0), to, amount, force, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\\n     * `amount` tokens.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (from == address(0)) {\\n            revert LSP7CannotSendWithAddressZero();\\n        }\\n\\n        uint256 balance = _tokenOwnerBalances[from];\\n        if (amount > balance) {\\n            revert LSP7AmountExceedsBalance(balance, from, amount);\\n        }\\n\\n        address operator = _msgSender();\\n        if (operator != from) {\\n            uint256 authorizedAmount = _operatorAuthorizedAmount[from][operator];\\n            if (amount > authorizedAmount) {\\n                revert LSP7AmountExceedsAuthorizedAmount(from, authorizedAmount, operator, amount);\\n            }\\n            _operatorAuthorizedAmount[from][operator] -= amount;\\n        }\\n\\n        _beforeTokenTransfer(from, address(0), amount);\\n\\n        _tokenOwnerBalances[from] -= amount;\\n\\n        emit Transfer(operator, from, address(0), amount, false, data);\\n\\n        _notifyTokenSender(from, address(0), amount, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens.\\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\\n     * `amount` tokens.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (from == address(0) || to == address(0)) {\\n            revert LSP7CannotSendWithAddressZero();\\n        }\\n\\n        uint256 balance = _tokenOwnerBalances[from];\\n        if (amount > balance) {\\n            revert LSP7AmountExceedsBalance(balance, from, amount);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        _tokenOwnerBalances[from] -= amount;\\n        _tokenOwnerBalances[to] += amount;\\n\\n        emit Transfer(operator, from, to, amount, force, data);\\n\\n        _notifyTokenSender(from, to, amount, data);\\n        _notifyTokenReceiver(from, to, amount, force, data);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `amount` tokens will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `amount` tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `amount` tokens will be burned.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // tokens being minted\\n        if (from == address(0)) {\\n            _existingTokens += amount;\\n        }\\n\\n        // tokens being burned\\n        if (to == address(0)) {\\n            _existingTokens -= amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev An attempt is made to notify the token sender about the `amount` tokens changing owners using\\n     * LSP1 interface.\\n     */\\n    function _notifyTokenSender(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (ERC165Checker.supportsERC165Interface(from, _INTERFACEID_LSP1)) {\\n            bytes memory packedData = abi.encodePacked(from, to, amount, data);\\n            ILSP1UniversalReceiver(from).universalReceiver(_TYPEID_LSP7_TOKENSSENDER, packedData);\\n        }\\n    }\\n\\n    /**\\n     * @dev An attempt is made to notify the token receiver about the `amount` tokens changing owners\\n     * using LSP1 interface. When force is FALSE the token receiver MUST support LSP1.\\n     *\\n     * The receiver may revert when the token being sent is not wanted.\\n     */\\n    function _notifyTokenReceiver(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (ERC165Checker.supportsERC165Interface(to, _INTERFACEID_LSP1)) {\\n            bytes memory packedData = abi.encodePacked(from, to, amount, data);\\n            ILSP1UniversalReceiver(to).universalReceiver(_TYPEID_LSP7_TOKENSRECIPIENT, packedData);\\n        } else if (!force) {\\n            if (to.code.length != 0) {\\n                revert LSP7NotifyTokenReceiverContractMissingLSP1Interface(to);\\n            } else {\\n                revert LSP7NotifyTokenReceiverIsEOA(to);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x65242aa893389472906a9edd7cee2e52d651d2e7e1809a31de07c4baf516f2a8\",\"license\":\"CC0-1.0\"},\"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7Errors.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// --- Errors\\n\\nerror LSP7AmountExceedsBalance(uint256 balance, address tokenOwner, uint256 amount);\\n\\nerror LSP7AmountExceedsAuthorizedAmount(\\n    address tokenOwner,\\n    uint256 authorizedAmount,\\n    address operator,\\n    uint256 amount\\n);\\n\\nerror LSP7CannotUseAddressZeroAsOperator();\\n\\nerror LSP7CannotSendWithAddressZero();\\n\\nerror LSP7InvalidTransferBatch();\\n\\nerror LSP7NotifyTokenReceiverContractMissingLSP1Interface(address tokenReceiver);\\n\\nerror LSP7NotifyTokenReceiverIsEOA(address tokenReceiver);\\n\",\"keccak256\":\"0xaf41eac66310a5a0c0dd84168cc0ce8acd5858a1c613ccb4103f44c6061f8a17\",\"license\":\"CC0-1.0\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/ForumNFT.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7DigitalAsset.sol\\\";\\n\\ncontract ForumNFT is  LSP7DigitalAsset {\\n\\n    struct Comment {\\n      string cid;\\n      address commentor;\\n      uint256 id;\\n    }\\n\\n    struct Post {\\n      string cid;\\n      address author;\\n      address[] likes;\\n      Comment[] comments;\\n      uint256 id;\\n    }\\n\\n    Post latestPost;\\n    address[] private emptyLikesArr;\\n    Comment[] private emptyCommentsArr;\\n    Comment[] private tempCommentsArr; //used for comments deleting since we cannot pop struct's arrays\\n    uint[] public postsIds;\\n\\n    mapping(uint256 => Post) public postByTokenId;\\n\\n    uint256 private postsCounter;\\n    uint256 private commentsCounter;\\n\\n    address private admin;\\n\\n    constructor(\\n      string memory _name,\\n      string memory _symbol,\\n      address _newOwner,\\n      bool _isNFT\\n    ) LSP7DigitalAsset(_name, _symbol, _newOwner, _isNFT) {\\n      admin = _newOwner;\\n    }\\n\\n    modifier onlyAdmin {\\n      require(msg.sender == admin);\\n      _;\\n    }\\n\\n\\n    //POSTS FUNCTIONS\\n    function createPost(string calldata _cid) public {\\n\\n      latestPost.cid = _cid;\\n      latestPost.author = msg.sender;\\n      latestPost.likes = emptyLikesArr;\\n      latestPost.id = ++postsCounter;\\n\\n      postByTokenId[postsCounter] = latestPost;\\n      postsIds.push(postsCounter);\\n\\n      _mint(msg.sender, postsCounter, true, \\\"\\\");\\n    }\\n\\n    function editPost(uint256 _tokenId, string calldata _cid) public {\\n      require(postByTokenId[_tokenId].author == msg.sender, 'Only author can edit post');\\n      postByTokenId[_tokenId].cid = _cid;\\n    }\\n\\n    function deletePost(uint256 _tokenId) public {\\n      require(postByTokenId[_tokenId].author == msg.sender\\n        || admin == msg.sender, 'author or admin can delete post');\\n\\n      uint256[] memory postsList = postsIds;\\n      uint256 totalPosts = postsList.length;\\n      uint256 postIndex;\\n      for (uint256 i = 0; i < totalPosts;) {\\n        if (postsList[i] == _tokenId) {\\n          postIndex = i;\\n          break;\\n        }\\n        unchecked {++i;}\\n      }\\n\\n      for(uint i = postIndex; i < totalPosts-1;){\\n        postsList[i] = postsList[i+1];\\n        unchecked {++i;}\\n      }\\n      postsIds = postsList;\\n      postsIds.pop();\\n    }\\n\\n    function fetchPosts() public view returns (Post[] memory posts, uint256, uint256, address) {\\n\\n      uint256 postsLength = postsIds.length;\\n      uint256[] memory postArray = postsIds;\\n      posts = new Post[](postsLength);\\n\\n      for (uint i = 0; i < postsLength;) {\\n        posts[i] = postByTokenId[postArray[i]];\\n        unchecked {++i;}\\n      }\\n\\n      return (posts, postsCounter, commentsCounter, admin);\\n    }\\n\\n    //COMMENTS FUNCTIONS\\n    function createComment(uint256 _tokenId, string calldata _cid) public {\\n\\n      Comment memory comment = Comment({\\n        cid: _cid,\\n        commentor: msg.sender,\\n        id: ++commentsCounter\\n      });\\n      postByTokenId[_tokenId].comments.push(comment);\\n    }\\n\\n    function _postCommentor(uint256 _tokenId, uint256 _commentId) internal view returns(address commentor) {\\n\\n      for(uint i = 0; i < postByTokenId[_tokenId].comments.length;) {\\n        if(postByTokenId[_tokenId].comments[i].id == _commentId) {\\n          commentor = postByTokenId[_tokenId].comments[i].commentor;\\n          break;\\n        }\\n        unchecked {++i;}\\n      }\\n      return commentor;\\n    }\\n\\n    //cant pop structs so have to build new array of structs without the value to delete\\n    //this function is really unoptimized but it works in the meantime copyof opcode is introduced\\n    function removeComment(uint256 _tokenId, uint256 _commentId) public {\\n      require(postByTokenId[_tokenId].author == msg.sender ||\\n       _postCommentor(_tokenId,_commentId) == msg.sender ||\\n       admin == msg.sender,\\n       'Only post author or commentor can remove comment');\\n\\n       Comment[] memory comments = postByTokenId[_tokenId].comments;\\n       uint256 totalComments = comments.length;\\n\\n      if(totalComments == 1){\\n        postByTokenId[_tokenId].comments = emptyCommentsArr;\\n      } else {\\n\\n        tempCommentsArr = emptyCommentsArr;\\n        for (uint256 i = 0; i < totalComments;) {\\n          if (comments[i].id != _commentId) {\\n            tempCommentsArr.push(postByTokenId[_tokenId].comments[i]);\\n          }\\n          unchecked {++i;}\\n        }\\n        postByTokenId[_tokenId].comments = tempCommentsArr;\\n      }\\n    }\\n\\n    function fetchComments(uint256 _tokenId) public view returns (Comment[] memory comments) {\\n\\n      uint256 commentsLength = postByTokenId[_tokenId].comments.length;\\n      Comment[] memory commentArray = postByTokenId[_tokenId].comments;\\n      comments = new Comment[](commentsLength);\\n\\n      for (uint i = 0; i < commentsLength;) {\\n        comments[i] = commentArray[i];\\n        unchecked {++i;}\\n      }\\n\\n      return comments;\\n    }\\n\\n    //LIKES FUNCTION\\n    function like(uint256 _tokenId) public {\\n\\n      address[] memory likesList = postByTokenId[_tokenId].likes;\\n      uint totalLikes = likesList.length;\\n      bool hasLiked = false;\\n      uint256 likeIndex = 0;\\n      for(uint i = 0; i < totalLikes;) {\\n        if(postByTokenId[_tokenId].likes[i] == msg.sender) {\\n          hasLiked = true;\\n          likeIndex = i;\\n          break;\\n        }\\n        unchecked {++i;}\\n      }\\n\\n      //if like index is 0 then add msg.sender to likes array\\n      if(!hasLiked){\\n        postByTokenId[_tokenId].likes.push(msg.sender);\\n      } else {\\n        //if like index is not 0 then remove msg.sender from likes array\\n        for(uint i = likeIndex; i < totalLikes-1;) {\\n          likesList[i] = likesList[i+1];\\n          unchecked {++i;}\\n        }\\n        postByTokenId[_tokenId].likes = likesList;\\n        postByTokenId[_tokenId].likes.pop();\\n      }\\n    }\\n\\n    function fetchLikes(uint256 _tokenId) public view returns (address[] memory likes) {\\n      likes = postByTokenId[_tokenId].likes;\\n      return likes;\\n    }\\n\\n    //ADMIN FUNCTION\\n    function changeAdmin(address _newAdmin) public onlyAdmin {\\n      admin = _newAdmin;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x097ff3c00a3edca199a3c56637a55860d8b9f09276a1392f6c6cbd629e5b9e8c\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005f2538038062005f25833981810160405281019062000037919062000569565b83838383838383806200005581620001a560201b620021d71760201c565b50620000c57feafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c60001b6040518060400160405280600481526020017fa4d9662400000000000000000000000000000000000000000000000000000000815250620002ad60201b620022d61760201c565b620000ff7fdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af160001b84620002ad60201b620022d61760201c565b620001397f2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db93275660001b83620002ad60201b620022d61760201c565b50505080600260006101000a81548160ff0219169083151502179055505050505081601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200094b565b620001b56200030160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620002aa5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505b50565b80600160008481526020019081526020016000209081620002cf919062000864565b50817fcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b60405160405180910390a25050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003938262000348565b810181811067ffffffffffffffff82111715620003b557620003b462000359565b5b80604052505050565b6000620003ca6200032a565b9050620003d8828262000388565b919050565b600067ffffffffffffffff821115620003fb57620003fa62000359565b5b620004068262000348565b9050602081019050919050565b60005b838110156200043357808201518184015260208101905062000416565b8381111562000443576000848401525b50505050565b6000620004606200045a84620003dd565b620003be565b9050828152602081018484840111156200047f576200047e62000343565b5b6200048c84828562000413565b509392505050565b600082601f830112620004ac57620004ab6200033e565b5b8151620004be84826020860162000449565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004f482620004c7565b9050919050565b6200050681620004e7565b81146200051257600080fd5b50565b6000815190506200052681620004fb565b92915050565b60008115159050919050565b62000543816200052c565b81146200054f57600080fd5b50565b600081519050620005638162000538565b92915050565b6000806000806080858703121562000586576200058562000334565b5b600085015167ffffffffffffffff811115620005a757620005a662000339565b5b620005b58782880162000494565b945050602085015167ffffffffffffffff811115620005d957620005d862000339565b5b620005e78782880162000494565b9350506040620005fa8782880162000515565b92505060606200060d8782880162000552565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200066c57607f821691505b60208210810362000682576200068162000624565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006ec7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620006ad565b620006f88683620006ad565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620007456200073f620007398462000710565b6200071a565b62000710565b9050919050565b6000819050919050565b620007618362000724565b6200077962000770826200074c565b848454620006ba565b825550505050565b600090565b6200079062000781565b6200079d81848462000756565b505050565b5b81811015620007c557620007b960008262000786565b600181019050620007a3565b5050565b601f8211156200081457620007de8162000688565b620007e9846200069d565b81016020851015620007f9578190505b6200081162000808856200069d565b830182620007a2565b50505b505050565b600082821c905092915050565b6000620008396000198460080262000819565b1980831691505092915050565b600062000854838362000826565b9150826002028217905092915050565b6200086f8262000619565b67ffffffffffffffff8111156200088b576200088a62000359565b5b62000897825462000653565b620008a4828285620007c9565b600060209050601f831160018114620008dc5760008415620008c7578287015190505b620008d3858262000846565b86555062000943565b601f198416620008ec8662000688565b60005b828110156200091657848901518255600182019150602085019450602081019050620008ef565b8683101562000936578489015162000932601f89168262000826565b8355505b6001600288020188555050505b505050505050565b6155ca806200095b6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063760d9bba116100f9578063abe48cc911610097578063e82935da11610071578063e82935da14610518578063f2fde38b14610534578063fa99654a14610550578063fad8b32a1461056c576101c4565b8063abe48cc91461049c578063c7303c61146104cc578063d95b6371146104e8576101c4565b80638f283970116100d35780638f28397014610427578063a71eb6a114610443578063a8a34e0a1461045f578063abaddd7f1461047b576101c4565b8063760d9bba146103d15780637f23690c146103ed5780638da5cb5b14610409576101c4565b806340a17985116101665780635053380c116101405780635053380c1461033757806354f6127f1461036757806370a0823114610397578063715018a6146103c7576101c4565b806340a17985146102cf57806347980aa3146102eb5780634e3e6e9c14610307576101c4565b806316ebbe04116101a257806316ebbe041461023157806318160ddd146102635780631c77a3a714610281578063313ce567146102b1576101c4565b806301ffc9a7146101c9578063094cd5ee146101f957806314a6e29314610215575b600080fd5b6101e360048036038101906101de91906135c4565b610588565b6040516101f0919061360c565b60405180910390f35b610213600480360381019061020e919061365d565b6105e9565b005b61022f600480360381019061022a91906139af565b610836565b005b61024b6004803603810190610246919061365d565b6108e1565b60405161025a93929190613aff565b60405180910390f35b61026b6109b3565b6040516102789190613b3d565b60405180910390f35b61029b6004803603810190610296919061365d565b6109bd565b6040516102a89190613cd2565b60405180910390f35b6102b9610bec565b6040516102c69190613b3d565b60405180910390f35b6102e960048036038101906102e49190613d4f565b610c14565b005b61030560048036038101906103009190613ddb565b610d50565b005b610321600480360381019061031c9190613e1b565b610d66565b60405161032e9190613f7b565b60405180910390f35b610351600480360381019061034c919061365d565b610e1c565b60405161035e919061404c565b60405180910390f35b610381600480360381019061037c919061406e565b610ec0565b60405161038e91906140e5565b60405180910390f35b6103b160048036038101906103ac9190614107565b610ed2565b6040516103be9190613b3d565b60405180910390f35b6103cf610f1b565b005b6103eb60048036038101906103e69190614160565b610f2f565b005b610407600480360381019061040291906141f7565b611067565b005b61041161107d565b60405161041e9190614253565b60405180910390f35b610441600480360381019061043c9190614107565b6110a6565b005b61045d6004803603810190610458919061426e565b611144565b005b61047960048036038101906104749190614434565b611582565b005b610483611675565b604051610493949392919061475a565b60405180910390f35b6104b660048036038101906104b1919061365d565b611aa8565b6040516104c39190613b3d565b60405180910390f35b6104e660048036038101906104e191906147a6565b611acc565b005b61050260048036038101906104fd91906147f3565b611c74565b60405161050f9190613b3d565b60405180910390f35b610532600480360381019061052d919061365d565b611d76565b005b61054e60048036038101906105499190614107565b61206f565b005b61056a60048036038101906105659190613d4f565b6120f2565b005b61058660048036038101906105819190614107565b6121c1565b005b600063e33f65c360e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105e257506105e182612328565b5b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600f600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806106a657503373ffffffffffffffffffffffffffffffffffffffff16601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6106e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dc9061487f565b60405180910390fd5b6000600e80548060200260200160405190810160405280929190818152602001828054801561073357602002820191906000526020600020905b81548152602001906001019080831161071f575b50505050509050600081519050600080600090505b8281101561078457848482815181106107645761076361489f565b5b60200260200101510361077957809150610784565b806001019050610748565b5060008190505b60018361079891906148fd565b8110156107f057836001826107ad9190614931565b815181106107be576107bd61489f565b5b60200260200101518482815181106107d9576107d861489f565b5b60200260200101818152505080600101905061078b565b5082600e90805190602001906108079291906130f2565b50600e80548061081a57610819614987565b5b6001900381819060005260206000200160009055905550505050565b61083e612389565b8051825114610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087990614a28565b60405180910390fd5b60005b82518110156108dc576108cc8382815181106108a4576108a361489f565b5b60200260200101518383815181106108bf576108be61489f565b5b6020026020010151612400565b6108d5816124c6565b9050610885565b505050565b600f60205280600052604060002060009150905080600001805461090490614a77565b80601f016020809104026020016040519081016040528092919081815260200182805461093090614a77565b801561097d5780601f106109525761010080835404028352916020019161097d565b820191906000526020600020905b81548152906001019060200180831161096057829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154905083565b6000600354905090565b60606000600f60008481526020019081526020016000206003018054905090506000600f6000858152602001908152602001600020600301805480602002602001604051908101604052809291908181526020016000905b82821015610b395783829060005260206000209060030201604051806060016040529081600082018054610a4890614a77565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7490614a77565b8015610ac15780601f10610a9657610100808354040283529160200191610ac1565b820191906000526020600020905b815481529060010190602001808311610aa457829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152505081526020019060010190610a15565b5050505090508167ffffffffffffffff811115610b5957610b586136a0565b5b604051908082528060200260200182016040528015610b9257816020015b610b7f61313f565b815260200190600190039081610b775790505b50925060005b82811015610be457818181518110610bb357610bb261489f565b5b6020026020010151848281518110610bce57610bcd61489f565b5b6020026020010181905250806001019050610b98565b505050919050565b6000600260009054906101000a900460ff16610c09576012610c0c565b60005b60ff16905090565b6000604051806060016040528084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020013373ffffffffffffffffffffffffffffffffffffffff168152602001601160008154610c9690614aa8565b9190508190558152509050600f60008581526020019081526020016000206003018190806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000019081610cf69190614c9c565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155505050505050565b610d62610d5b6124d3565b83836124db565b5050565b6060815167ffffffffffffffff811115610d8357610d826136a0565b5b604051908082528060200260200182016040528015610db657816020015b6060815260200190600190039081610da15790505b50905060005b8251811015610e1657610de8838281518110610ddb57610dda61489f565b5b60200260200101516126bf565b828281518110610dfb57610dfa61489f565b5b6020026020010181905250610e0f816124c6565b9050610dbc565b50919050565b6060600f6000838152602001908152602001600020600201805480602002602001604051908101604052809291908181526020018280548015610eb457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e6a575b50505050509050919050565b6060610ecb826126bf565b9050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f23612389565b610f2d60006121d7565b565b6000610f396124d3565b90508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611052576000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508085111561103a57868183876040517ff3a6b6910000000000000000000000000000000000000000000000000000000081526004016110319493929190614d6e565b60405180910390fd5b6110508783878461104b91906148fd565b6124db565b505b61105f8686868686612764565b505050505050565b61106f612389565b6110798282612400565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110057600080fd5b80601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600f600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806111e857503373ffffffffffffffffffffffffffffffffffffffff166111d083836129f4565b73ffffffffffffffffffffffffffffffffffffffff16145b8061124057503373ffffffffffffffffffffffffffffffffffffffff16601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61127f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127690614e25565b60405180910390fd5b6000600f6000848152602001908152602001600020600301805480602002602001604051908101604052809291908181526020016000905b828210156113db57838290600052602060002090600302016040518060600160405290816000820180546112ea90614a77565b80601f016020809104026020016040519081016040528092919081815260200182805461131690614a77565b80156113635780601f1061133857610100808354040283529160200191611363565b820191906000526020600020905b81548152906001019060200180831161134657829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481525050815260200190600101906112b7565b5050505090506000815190506001810361141b57600c600f6000868152602001908152602001600020600301908054611415929190613176565b5061157c565b600c600d90805461142d929190613176565b5060005b81811015611553578383828151811061144d5761144c61489f565b5b6020026020010151604001511461154857600d600f600087815260200190815260200160002060030182815481106114885761148761489f565b5b90600052602060002090600302019080600181540180825580915050600190039060005260206000209060030201600090919091909150600082018160000190816114d39190614e5b565b506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820154816002015550505b806001019050611431565b50600d600f600086815260200190815260200160002060030190805461157a929190613176565b505b50505050565b8351855114158061159557508251855114155b806115a257508051855114155b156115d9576040517f263eee8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b855181101561166d5761165a8682815181106115fb576115fa61489f565b5b60200260200101518683815181106116165761161561489f565b5b60200260200101518684815181106116315761163061489f565b5b60200260200101518686868151811061164d5761164c61489f565b5b6020026020010151610f2f565b808061166590614aa8565b9150506115dc565b505050505050565b6060600080600080600e8054905090506000600e8054806020026020016040519081016040528092919081815260200182805480156116d357602002820191906000526020600020905b8154815260200190600101908083116116bf575b505050505090508167ffffffffffffffff8111156116f4576116f36136a0565b5b60405190808252806020026020018201604052801561172d57816020015b61171a613254565b8152602001906001900390816117125790505b50955060005b82811015611a6d57600f60008383815181106117525761175161489f565b5b602002602001015181526020019081526020016000206040518060a001604052908160008201805461178390614a77565b80601f01602080910402602001604051908101604052809291908181526020018280546117af90614a77565b80156117fc5780601f106117d1576101008083540402835291602001916117fc565b820191906000526020600020905b8154815290600101906020018083116117df57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054806020026020016040519081016040528092919081815260200182805480156118e057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611896575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015611a32578382906000526020600020906003020160405180606001604052908160008201805461194190614a77565b80601f016020809104026020016040519081016040528092919081815260200182805461196d90614a77565b80156119ba5780601f1061198f576101008083540402835291602001916119ba565b820191906000526020600020905b81548152906001019060200180831161199d57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815250508152602001906001019061190e565b505050508152602001600482015481525050878281518110611a5757611a5661489f565b5b6020026020010181905250806001019050611733565b5085601054601154601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169550955095509550505090919293565b600e8181548110611ab857600080fd5b906000526020600020016000915090505481565b818160066000019182611ae0929190614f4e565b5033600660010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b6006600201908054611b3a929190613299565b50601060008154611b4a90614aa8565b9190508190556006600401819055506006600f6000601054815260200190815260200160002060008201816000019081611b849190614e5b565b506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820181600201908054611c029291906132eb565b506003820181600301908054611c1992919061333d565b5060048201548160040155905050600e6010549080600181540180825580915050600190039060005260206000200160009091909190915055611c7033601054600160405180602001604052806000815250612ad0565b5050565b60008273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611cf057600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611d70565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600f6000838152602001908152602001600020600201805480602002602001604051908101604052809291908181526020018280548015611e0e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611dc4575b5050505050905060008151905060008060005b83811015611ec5573373ffffffffffffffffffffffffffffffffffffffff16600f60008881526020019081526020016000206002018281548110611e6857611e6761489f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611eba5760019250809150611ec5565b806001019050611e21565b5081611f4757600f6000868152602001908152602001600020600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612068565b60008190505b600184611f5a91906148fd565b811015611fe05784600182611f6f9190614931565b81518110611f8057611f7f61489f565b5b6020026020010151858281518110611f9b57611f9a61489f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806001019050611f4d565b5083600f6000878152602001908152602001600020600201908051906020019061200b92919061341b565b50600f600086815260200190815260200160002060020180548061203257612031614987565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b5050505050565b612077612389565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120dd90615090565b60405180910390fd5b6120ef816121d7565b50565b3373ffffffffffffffffffffffffffffffffffffffff16600f600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218d906150fc565b60405180910390fd5b8181600f600086815260200190815260200160002060000191826121bb929190614f4e565b50505050565b6121d46121cc6124d3565b8260006124db565b50565b6121df61107d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146122d35760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505b50565b806001600084815260200190815260200160002090816122f69190615177565b50817fcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b60405160405180910390a25050565b600063714df77c60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612382575061238182612c3a565b5b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff166123a861107d565b73ffffffffffffffffffffffffffffffffffffffff16146123fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f590615295565b60405180910390fd5b565b7fdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af160001b820361245c576040517f85c169bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db93275660001b82036124b8576040517f76755b3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6124c282826122d6565b5050565b6000600182019050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612541576040517f6355e76600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603156126ba5780600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000811461265e57808373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fd66aff874162a96578e919097b6f6d153dfd89a5cec41bb331fdb0c4aec16e2c60405160405180910390a46126b9565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa160405160405180910390a35b5b505050565b60606001600083815260200190815260200160002080546126df90614a77565b80601f016020809104026020016040519081016040528092919081815260200182805461270b90614a77565b80156127585780601f1061272d57610100808354040283529160200191612758565b820191906000526020600020905b81548152906001019060200180831161273b57829003601f168201915b50505050509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806127cb5750600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15612802576040517fd2d5ec3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508084111561288f578086856040517f08d47949000000000000000000000000000000000000000000000000000000008152600401612886939291906152b5565b60405180910390fd5b60006128996124d3565b90506128a6878787612ca4565b84600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128f591906148fd565b9250508190555084600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461294b9190614931565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a68888886040516129ca939291906152ec565b60405180910390a46129de87878786612d45565b6129eb8787878787612e34565b50505050505050565b600080600090505b600f600085815260200190815260200160002060030180549050811015612ac95782600f60008681526020019081526020016000206003018281548110612a4657612a4561489f565b5b90600052602060002090600302016002015403612abe57600f60008581526020019081526020016000206003018181548110612a8557612a8461489f565b5b906000526020600020906003020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150612ac9565b8060010190506129fc565b5092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612b36576040517fd2d5ec3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612b406124d3565b9050612b4e60008686612ca4565b83600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b9d9190614931565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6878787604051612c1d939291906152ec565b60405180910390a4612c33600086868686612e34565b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612cf2578060036000828254612cea9190614931565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612d40578060036000828254612d3891906148fd565b925050819055505b505050565b612d5684636bb56a1460e01b612fc7565b15612e2e57600084848484604051602001612d7494939291906153cf565b60405160208183030381529060405290508473ffffffffffffffffffffffffffffffffffffffff16636bb56a147f40b8bec57d7b5ff0dbd9e9acd0a47dfeb0101e1a203766f5ccab00445fbf39e960001b836040518363ffffffff1660e01b8152600401612de3929190615428565b6000604051808303816000875af1158015612e02573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612e2b91906154c8565b50505b50505050565b612e4584636bb56a1460e01b612fc7565b15612f2157600085858584604051602001612e6394939291906153cf565b60405160208183030381529060405290508473ffffffffffffffffffffffffffffffffffffffff16636bb56a147fdbe2c314e1aee2970c72666f2ebe8933a8575263ea71e5ff6a9178e95d47a26f60001b836040518363ffffffff1660e01b8152600401612ed2929190615428565b6000604051808303816000875af1158015612ef1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612f1a91906154c8565b5050612fc0565b81612fbf5760008473ffffffffffffffffffffffffffffffffffffffff163b14612f8257836040517fa608fbb6000000000000000000000000000000000000000000000000000000008152600401612f799190614253565b60405180910390fd5b836040517f26c247f4000000000000000000000000000000000000000000000000000000008152600401612fb69190614253565b60405180910390fd5b5b5050505050565b6000806301ffc9a760e01b83604051602401612fe39190615520565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000808573ffffffffffffffffffffffffffffffffffffffff166175308460405161306d919061553b565b6000604051808303818686fa925050503d80600081146130a9576040519150601f19603f3d011682016040523d82523d6000602084013e6130ae565b606091505b50915091506020815110156130c957600093505050506130ec565b8180156130e65750808060200190518101906130e59190615567565b5b93505050505b92915050565b82805482825590600052602060002090810192821561312e579160200282015b8281111561312d578251825591602001919060010190613112565b5b50905061313b91906134a5565b5090565b604051806060016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b8280548282559060005260206000209060030281019282156132435760005260206000209160030282015b82811115613242578282600082018160000190816131bf9190614e5b565b506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201555050916003019190600301906131a1565b5b50905061325091906134c2565b5090565b6040518060a0016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b8280548282559060005260206000209081019282156132da5760005260206000209182015b828111156132d95782548255916001019190600101906132be565b5b5090506132e791906134a5565b5090565b82805482825590600052602060002090810192821561332c5760005260206000209182015b8281111561332b578254825591600101919060010190613310565b5b50905061333991906134a5565b5090565b82805482825590600052602060002090600302810192821561340a5760005260206000209160030282015b82811115613409578282600082018160000190816133869190614e5b565b506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028201548160020155505091600301919060030190613368565b5b50905061341791906134c2565b5090565b828054828255906000526020600020908101928215613494579160200282015b828111156134935782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061343b565b5b5090506134a191906134a5565b5090565b5b808211156134be5760008160009055506001016134a6565b5090565b5b8082111561351457600080820160006134dc9190613518565b6001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055506003016134c3565b5090565b50805461352490614a77565b6000825580601f106135365750613555565b601f01602090049060005260206000209081019061355491906134a5565b5b50565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6135a18161356c565b81146135ac57600080fd5b50565b6000813590506135be81613598565b92915050565b6000602082840312156135da576135d9613562565b5b60006135e8848285016135af565b91505092915050565b60008115159050919050565b613606816135f1565b82525050565b600060208201905061362160008301846135fd565b92915050565b6000819050919050565b61363a81613627565b811461364557600080fd5b50565b60008135905061365781613631565b92915050565b60006020828403121561367357613672613562565b5b600061368184828501613648565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136d88261368f565b810181811067ffffffffffffffff821117156136f7576136f66136a0565b5b80604052505050565b600061370a613558565b905061371682826136cf565b919050565b600067ffffffffffffffff821115613736576137356136a0565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61375f8161374c565b811461376a57600080fd5b50565b60008135905061377c81613756565b92915050565b60006137956137908461371b565b613700565b905080838252602082019050602084028301858111156137b8576137b7613747565b5b835b818110156137e157806137cd888261376d565b8452602084019350506020810190506137ba565b5050509392505050565b600082601f830112613800576137ff61368a565b5b8135613810848260208601613782565b91505092915050565b600067ffffffffffffffff821115613834576138336136a0565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115613865576138646136a0565b5b61386e8261368f565b9050602081019050919050565b82818337600083830152505050565b600061389d6138988461384a565b613700565b9050828152602081018484840111156138b9576138b8613845565b5b6138c484828561387b565b509392505050565b600082601f8301126138e1576138e061368a565b5b81356138f184826020860161388a565b91505092915050565b600061390d61390884613819565b613700565b905080838252602082019050602084028301858111156139305761392f613747565b5b835b8181101561397757803567ffffffffffffffff8111156139555761395461368a565b5b80860161396289826138cc565b85526020850194505050602081019050613932565b5050509392505050565b600082601f8301126139965761399561368a565b5b81356139a68482602086016138fa565b91505092915050565b600080604083850312156139c6576139c5613562565b5b600083013567ffffffffffffffff8111156139e4576139e3613567565b5b6139f0858286016137eb565b925050602083013567ffffffffffffffff811115613a1157613a10613567565b5b613a1d85828601613981565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613a61578082015181840152602081019050613a46565b83811115613a70576000848401525b50505050565b6000613a8182613a27565b613a8b8185613a32565b9350613a9b818560208601613a43565b613aa48161368f565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613ada82613aaf565b9050919050565b613aea81613acf565b82525050565b613af981613627565b82525050565b60006060820190508181036000830152613b198186613a76565b9050613b286020830185613ae1565b613b356040830184613af0565b949350505050565b6000602082019050613b526000830184613af0565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000613ba082613a27565b613baa8185613b84565b9350613bba818560208601613a43565b613bc38161368f565b840191505092915050565b613bd781613acf565b82525050565b613be681613627565b82525050565b60006060830160008301518482036000860152613c098282613b95565b9150506020830151613c1e6020860182613bce565b506040830151613c316040860182613bdd565b508091505092915050565b6000613c488383613bec565b905092915050565b6000602082019050919050565b6000613c6882613b58565b613c728185613b63565b935083602082028501613c8485613b74565b8060005b85811015613cc05784840389528151613ca18582613c3c565b9450613cac83613c50565b925060208a01995050600181019050613c88565b50829750879550505050505092915050565b60006020820190508181036000830152613cec8184613c5d565b905092915050565b600080fd5b60008083601f840112613d0f57613d0e61368a565b5b8235905067ffffffffffffffff811115613d2c57613d2b613cf4565b5b602083019150836001820283011115613d4857613d47613747565b5b9250929050565b600080600060408486031215613d6857613d67613562565b5b6000613d7686828701613648565b935050602084013567ffffffffffffffff811115613d9757613d96613567565b5b613da386828701613cf9565b92509250509250925092565b613db881613acf565b8114613dc357600080fd5b50565b600081359050613dd581613daf565b92915050565b60008060408385031215613df257613df1613562565b5b6000613e0085828601613dc6565b9250506020613e1185828601613648565b9150509250929050565b600060208284031215613e3157613e30613562565b5b600082013567ffffffffffffffff811115613e4f57613e4e613567565b5b613e5b848285016137eb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000613eb782613e90565b613ec18185613e9b565b9350613ed1818560208601613a43565b613eda8161368f565b840191505092915050565b6000613ef18383613eac565b905092915050565b6000602082019050919050565b6000613f1182613e64565b613f1b8185613e6f565b935083602082028501613f2d85613e80565b8060005b85811015613f695784840389528151613f4a8582613ee5565b9450613f5583613ef9565b925060208a01995050600181019050613f31565b50829750879550505050505092915050565b60006020820190508181036000830152613f958184613f06565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613fd58383613bce565b60208301905092915050565b6000602082019050919050565b6000613ff982613f9d565b6140038185613fa8565b935061400e83613fb9565b8060005b8381101561403f5781516140268882613fc9565b975061403183613fe1565b925050600181019050614012565b5085935050505092915050565b600060208201905081810360008301526140668184613fee565b905092915050565b60006020828403121561408457614083613562565b5b60006140928482850161376d565b91505092915050565b600082825260208201905092915050565b60006140b782613e90565b6140c1818561409b565b93506140d1818560208601613a43565b6140da8161368f565b840191505092915050565b600060208201905081810360008301526140ff81846140ac565b905092915050565b60006020828403121561411d5761411c613562565b5b600061412b84828501613dc6565b91505092915050565b61413d816135f1565b811461414857600080fd5b50565b60008135905061415a81614134565b92915050565b600080600080600060a0868803121561417c5761417b613562565b5b600061418a88828901613dc6565b955050602061419b88828901613dc6565b94505060406141ac88828901613648565b93505060606141bd8882890161414b565b925050608086013567ffffffffffffffff8111156141de576141dd613567565b5b6141ea888289016138cc565b9150509295509295909350565b6000806040838503121561420e5761420d613562565b5b600061421c8582860161376d565b925050602083013567ffffffffffffffff81111561423d5761423c613567565b5b614249858286016138cc565b9150509250929050565b60006020820190506142686000830184613ae1565b92915050565b6000806040838503121561428557614284613562565b5b600061429385828601613648565b92505060206142a485828601613648565b9150509250929050565b600067ffffffffffffffff8211156142c9576142c86136a0565b5b602082029050602081019050919050565b60006142ed6142e8846142ae565b613700565b905080838252602082019050602084028301858111156143105761430f613747565b5b835b8181101561433957806143258882613dc6565b845260208401935050602081019050614312565b5050509392505050565b600082601f8301126143585761435761368a565b5b81356143688482602086016142da565b91505092915050565b600067ffffffffffffffff82111561438c5761438b6136a0565b5b602082029050602081019050919050565b60006143b06143ab84614371565b613700565b905080838252602082019050602084028301858111156143d3576143d2613747565b5b835b818110156143fc57806143e88882613648565b8452602084019350506020810190506143d5565b5050509392505050565b600082601f83011261441b5761441a61368a565b5b813561442b84826020860161439d565b91505092915050565b600080600080600060a086880312156144505761444f613562565b5b600086013567ffffffffffffffff81111561446e5761446d613567565b5b61447a88828901614343565b955050602086013567ffffffffffffffff81111561449b5761449a613567565b5b6144a788828901614343565b945050604086013567ffffffffffffffff8111156144c8576144c7613567565b5b6144d488828901614406565b93505060606144e58882890161414b565b925050608086013567ffffffffffffffff81111561450657614505613567565b5b61451288828901613981565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061456782613f9d565b614571818561454b565b935061457c83613fb9565b8060005b838110156145ad5781516145948882613fc9565b975061459f83613fe1565b925050600181019050614580565b5085935050505092915050565b600082825260208201905092915050565b60006145d682613b58565b6145e081856145ba565b9350836020820285016145f285613b74565b8060005b8581101561462e578484038952815161460f8582613c3c565b945061461a83613c50565b925060208a019950506001810190506145f6565b50829750879550505050505092915050565b600060a083016000830151848203600086015261465d8282613b95565b91505060208301516146726020860182613bce565b506040830151848203604086015261468a828261455c565b915050606083015184820360608601526146a482826145cb565b91505060808301516146b96080860182613bdd565b508091505092915050565b60006146d08383614640565b905092915050565b6000602082019050919050565b60006146f08261451f565b6146fa818561452a565b93508360208202850161470c8561453b565b8060005b85811015614748578484038952815161472985826146c4565b9450614734836146d8565b925060208a01995050600181019050614710565b50829750879550505050505092915050565b6000608082019050818103600083015261477481876146e5565b90506147836020830186613af0565b6147906040830185613af0565b61479d6060830184613ae1565b95945050505050565b600080602083850312156147bd576147bc613562565b5b600083013567ffffffffffffffff8111156147db576147da613567565b5b6147e785828601613cf9565b92509250509250929050565b6000806040838503121561480a57614809613562565b5b600061481885828601613dc6565b925050602061482985828601613dc6565b9150509250929050565b7f617574686f72206f722061646d696e2063616e2064656c65746520706f737400600082015250565b6000614869601f83613a32565b915061487482614833565b602082019050919050565b600060208201905081810360008301526148988161485c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061490882613627565b915061491383613627565b925082821015614926576149256148ce565b5b828203905092915050565b600061493c82613627565b915061494783613627565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561497c5761497b6148ce565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4b657973206c656e677468206e6f7420657175616c20746f2076616c7565732060008201527f6c656e6774680000000000000000000000000000000000000000000000000000602082015250565b6000614a12602683613a32565b9150614a1d826149b6565b604082019050919050565b60006020820190508181036000830152614a4181614a05565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614a8f57607f821691505b602082108103614aa257614aa1614a48565b5b50919050565b6000614ab382613627565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614ae557614ae46148ce565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614b527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614b15565b614b5c8683614b15565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614b99614b94614b8f84613627565b614b74565b613627565b9050919050565b6000819050919050565b614bb383614b7e565b614bc7614bbf82614ba0565b848454614b22565b825550505050565b600090565b614bdc614bcf565b614be7818484614baa565b505050565b5b81811015614c0b57614c00600082614bd4565b600181019050614bed565b5050565b601f821115614c5057614c2181614af0565b614c2a84614b05565b81016020851015614c39578190505b614c4d614c4585614b05565b830182614bec565b50505b505050565b600082821c905092915050565b6000614c7360001984600802614c55565b1980831691505092915050565b6000614c8c8383614c62565b9150826002028217905092915050565b614ca582613a27565b67ffffffffffffffff811115614cbe57614cbd6136a0565b5b614cc88254614a77565b614cd3828285614c0f565b600060209050601f831160018114614d065760008415614cf4578287015190505b614cfe8582614c80565b865550614d66565b601f198416614d1486614af0565b60005b82811015614d3c57848901518255600182019150602085019450602081019050614d17565b86831015614d595784890151614d55601f891682614c62565b8355505b6001600288020188555050505b505050505050565b6000608082019050614d836000830187613ae1565b614d906020830186613af0565b614d9d6040830185613ae1565b614daa6060830184613af0565b95945050505050565b7f4f6e6c7920706f737420617574686f72206f7220636f6d6d656e746f7220636160008201527f6e2072656d6f766520636f6d6d656e7400000000000000000000000000000000602082015250565b6000614e0f603083613a32565b9150614e1a82614db3565b604082019050919050565b60006020820190508181036000830152614e3e81614e02565b9050919050565b600081549050614e5481614a77565b9050919050565b818103614e69575050614f41565b614e7282614e45565b67ffffffffffffffff811115614e8b57614e8a6136a0565b5b614e958254614a77565b614ea0828285614c0f565b6000601f831160018114614ecf5760008415614ebd578287015490505b614ec78582614c80565b865550614f3a565b601f198416614edd87614af0565b9650614ee886614af0565b60005b82811015614f1057848901548255600182019150600185019450602081019050614eeb565b86831015614f2d5784890154614f29601f891682614c62565b8355505b6001600288020188555050505b5050505050505b565b600082905092915050565b614f588383614f43565b67ffffffffffffffff811115614f7157614f706136a0565b5b614f7b8254614a77565b614f86828285614c0f565b6000601f831160018114614fb55760008415614fa3578287013590505b614fad8582614c80565b865550615015565b601f198416614fc386614af0565b60005b82811015614feb57848901358255600182019150602085019450602081019050614fc6565b868310156150085784890135615004601f891682614c62565b8355505b6001600288020188555050505b50505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061507a602683613a32565b91506150858261501e565b604082019050919050565b600060208201905081810360008301526150a98161506d565b9050919050565b7f4f6e6c7920617574686f722063616e206564697420706f737400000000000000600082015250565b60006150e6601983613a32565b91506150f1826150b0565b602082019050919050565b60006020820190508181036000830152615115816150d9565b9050919050565b60008190508160005260206000209050919050565b601f821115615172576151438161511c565b61514c84614b05565b8101602085101561515b578190505b61516f61516785614b05565b830182614bec565b50505b505050565b61518082613e90565b67ffffffffffffffff811115615199576151986136a0565b5b6151a38254614a77565b6151ae828285615131565b600060209050601f8311600181146151e157600084156151cf578287015190505b6151d98582614c80565b865550615241565b601f1984166151ef8661511c565b60005b82811015615217578489015182556001820191506020850194506020810190506151f2565b868310156152345784890151615230601f891682614c62565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061527f602083613a32565b915061528a82615249565b602082019050919050565b600060208201905081810360008301526152ae81615272565b9050919050565b60006060820190506152ca6000830186613af0565b6152d76020830185613ae1565b6152e46040830184613af0565b949350505050565b60006060820190506153016000830186613af0565b61530e60208301856135fd565b818103604083015261532081846140ac565b9050949350505050565b60008160601b9050919050565b60006153428261532a565b9050919050565b600061535482615337565b9050919050565b61536c61536782613acf565b615349565b82525050565b6000819050919050565b61538d61538882613627565b615372565b82525050565b600081905092915050565b60006153a982613e90565b6153b38185615393565b93506153c3818560208601613a43565b80840191505092915050565b60006153db828761535b565b6014820191506153eb828661535b565b6014820191506153fb828561537c565b60208201915061540b828461539e565b915081905095945050505050565b6154228161374c565b82525050565b600060408201905061543d6000830185615419565b818103602083015261544f81846140ac565b90509392505050565b600061546b6154668461384a565b613700565b90508281526020810184848401111561548757615486613845565b5b615492848285613a43565b509392505050565b600082601f8301126154af576154ae61368a565b5b81516154bf848260208601615458565b91505092915050565b6000602082840312156154de576154dd613562565b5b600082015167ffffffffffffffff8111156154fc576154fb613567565b5b6155088482850161549a565b91505092915050565b61551a8161356c565b82525050565b60006020820190506155356000830184615511565b92915050565b6000615547828461539e565b915081905092915050565b60008151905061556181614134565b92915050565b60006020828403121561557d5761557c613562565b5b600061558b84828501615552565b9150509291505056fea2646970667358221220f8628cbcfeb8413ac8b67d5081224fb023995e2efe7f3cf8dcdbb2397ce1df0e64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063760d9bba116100f9578063abe48cc911610097578063e82935da11610071578063e82935da14610518578063f2fde38b14610534578063fa99654a14610550578063fad8b32a1461056c576101c4565b8063abe48cc91461049c578063c7303c61146104cc578063d95b6371146104e8576101c4565b80638f283970116100d35780638f28397014610427578063a71eb6a114610443578063a8a34e0a1461045f578063abaddd7f1461047b576101c4565b8063760d9bba146103d15780637f23690c146103ed5780638da5cb5b14610409576101c4565b806340a17985116101665780635053380c116101405780635053380c1461033757806354f6127f1461036757806370a0823114610397578063715018a6146103c7576101c4565b806340a17985146102cf57806347980aa3146102eb5780634e3e6e9c14610307576101c4565b806316ebbe04116101a257806316ebbe041461023157806318160ddd146102635780631c77a3a714610281578063313ce567146102b1576101c4565b806301ffc9a7146101c9578063094cd5ee146101f957806314a6e29314610215575b600080fd5b6101e360048036038101906101de91906135c4565b610588565b6040516101f0919061360c565b60405180910390f35b610213600480360381019061020e919061365d565b6105e9565b005b61022f600480360381019061022a91906139af565b610836565b005b61024b6004803603810190610246919061365d565b6108e1565b60405161025a93929190613aff565b60405180910390f35b61026b6109b3565b6040516102789190613b3d565b60405180910390f35b61029b6004803603810190610296919061365d565b6109bd565b6040516102a89190613cd2565b60405180910390f35b6102b9610bec565b6040516102c69190613b3d565b60405180910390f35b6102e960048036038101906102e49190613d4f565b610c14565b005b61030560048036038101906103009190613ddb565b610d50565b005b610321600480360381019061031c9190613e1b565b610d66565b60405161032e9190613f7b565b60405180910390f35b610351600480360381019061034c919061365d565b610e1c565b60405161035e919061404c565b60405180910390f35b610381600480360381019061037c919061406e565b610ec0565b60405161038e91906140e5565b60405180910390f35b6103b160048036038101906103ac9190614107565b610ed2565b6040516103be9190613b3d565b60405180910390f35b6103cf610f1b565b005b6103eb60048036038101906103e69190614160565b610f2f565b005b610407600480360381019061040291906141f7565b611067565b005b61041161107d565b60405161041e9190614253565b60405180910390f35b610441600480360381019061043c9190614107565b6110a6565b005b61045d6004803603810190610458919061426e565b611144565b005b61047960048036038101906104749190614434565b611582565b005b610483611675565b604051610493949392919061475a565b60405180910390f35b6104b660048036038101906104b1919061365d565b611aa8565b6040516104c39190613b3d565b60405180910390f35b6104e660048036038101906104e191906147a6565b611acc565b005b61050260048036038101906104fd91906147f3565b611c74565b60405161050f9190613b3d565b60405180910390f35b610532600480360381019061052d919061365d565b611d76565b005b61054e60048036038101906105499190614107565b61206f565b005b61056a60048036038101906105659190613d4f565b6120f2565b005b61058660048036038101906105819190614107565b6121c1565b005b600063e33f65c360e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105e257506105e182612328565b5b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff16600f600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806106a657503373ffffffffffffffffffffffffffffffffffffffff16601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6106e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dc9061487f565b60405180910390fd5b6000600e80548060200260200160405190810160405280929190818152602001828054801561073357602002820191906000526020600020905b81548152602001906001019080831161071f575b50505050509050600081519050600080600090505b8281101561078457848482815181106107645761076361489f565b5b60200260200101510361077957809150610784565b806001019050610748565b5060008190505b60018361079891906148fd565b8110156107f057836001826107ad9190614931565b815181106107be576107bd61489f565b5b60200260200101518482815181106107d9576107d861489f565b5b60200260200101818152505080600101905061078b565b5082600e90805190602001906108079291906130f2565b50600e80548061081a57610819614987565b5b6001900381819060005260206000200160009055905550505050565b61083e612389565b8051825114610882576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087990614a28565b60405180910390fd5b60005b82518110156108dc576108cc8382815181106108a4576108a361489f565b5b60200260200101518383815181106108bf576108be61489f565b5b6020026020010151612400565b6108d5816124c6565b9050610885565b505050565b600f60205280600052604060002060009150905080600001805461090490614a77565b80601f016020809104026020016040519081016040528092919081815260200182805461093090614a77565b801561097d5780601f106109525761010080835404028352916020019161097d565b820191906000526020600020905b81548152906001019060200180831161096057829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154905083565b6000600354905090565b60606000600f60008481526020019081526020016000206003018054905090506000600f6000858152602001908152602001600020600301805480602002602001604051908101604052809291908181526020016000905b82821015610b395783829060005260206000209060030201604051806060016040529081600082018054610a4890614a77565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7490614a77565b8015610ac15780601f10610a9657610100808354040283529160200191610ac1565b820191906000526020600020905b815481529060010190602001808311610aa457829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152505081526020019060010190610a15565b5050505090508167ffffffffffffffff811115610b5957610b586136a0565b5b604051908082528060200260200182016040528015610b9257816020015b610b7f61313f565b815260200190600190039081610b775790505b50925060005b82811015610be457818181518110610bb357610bb261489f565b5b6020026020010151848281518110610bce57610bcd61489f565b5b6020026020010181905250806001019050610b98565b505050919050565b6000600260009054906101000a900460ff16610c09576012610c0c565b60005b60ff16905090565b6000604051806060016040528084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020013373ffffffffffffffffffffffffffffffffffffffff168152602001601160008154610c9690614aa8565b9190508190558152509050600f60008581526020019081526020016000206003018190806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000019081610cf69190614c9c565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155505050505050565b610d62610d5b6124d3565b83836124db565b5050565b6060815167ffffffffffffffff811115610d8357610d826136a0565b5b604051908082528060200260200182016040528015610db657816020015b6060815260200190600190039081610da15790505b50905060005b8251811015610e1657610de8838281518110610ddb57610dda61489f565b5b60200260200101516126bf565b828281518110610dfb57610dfa61489f565b5b6020026020010181905250610e0f816124c6565b9050610dbc565b50919050565b6060600f6000838152602001908152602001600020600201805480602002602001604051908101604052809291908181526020018280548015610eb457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610e6a575b50505050509050919050565b6060610ecb826126bf565b9050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f23612389565b610f2d60006121d7565b565b6000610f396124d3565b90508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611052576000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508085111561103a57868183876040517ff3a6b6910000000000000000000000000000000000000000000000000000000081526004016110319493929190614d6e565b60405180910390fd5b6110508783878461104b91906148fd565b6124db565b505b61105f8686868686612764565b505050505050565b61106f612389565b6110798282612400565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461110057600080fd5b80601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600f600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806111e857503373ffffffffffffffffffffffffffffffffffffffff166111d083836129f4565b73ffffffffffffffffffffffffffffffffffffffff16145b8061124057503373ffffffffffffffffffffffffffffffffffffffff16601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b61127f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127690614e25565b60405180910390fd5b6000600f6000848152602001908152602001600020600301805480602002602001604051908101604052809291908181526020016000905b828210156113db57838290600052602060002090600302016040518060600160405290816000820180546112ea90614a77565b80601f016020809104026020016040519081016040528092919081815260200182805461131690614a77565b80156113635780601f1061133857610100808354040283529160200191611363565b820191906000526020600020905b81548152906001019060200180831161134657829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481525050815260200190600101906112b7565b5050505090506000815190506001810361141b57600c600f6000868152602001908152602001600020600301908054611415929190613176565b5061157c565b600c600d90805461142d929190613176565b5060005b81811015611553578383828151811061144d5761144c61489f565b5b6020026020010151604001511461154857600d600f600087815260200190815260200160002060030182815481106114885761148761489f565b5b90600052602060002090600302019080600181540180825580915050600190039060005260206000209060030201600090919091909150600082018160000190816114d39190614e5b565b506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820154816002015550505b806001019050611431565b50600d600f600086815260200190815260200160002060030190805461157a929190613176565b505b50505050565b8351855114158061159557508251855114155b806115a257508051855114155b156115d9576040517f263eee8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b855181101561166d5761165a8682815181106115fb576115fa61489f565b5b60200260200101518683815181106116165761161561489f565b5b60200260200101518684815181106116315761163061489f565b5b60200260200101518686868151811061164d5761164c61489f565b5b6020026020010151610f2f565b808061166590614aa8565b9150506115dc565b505050505050565b6060600080600080600e8054905090506000600e8054806020026020016040519081016040528092919081815260200182805480156116d357602002820191906000526020600020905b8154815260200190600101908083116116bf575b505050505090508167ffffffffffffffff8111156116f4576116f36136a0565b5b60405190808252806020026020018201604052801561172d57816020015b61171a613254565b8152602001906001900390816117125790505b50955060005b82811015611a6d57600f60008383815181106117525761175161489f565b5b602002602001015181526020019081526020016000206040518060a001604052908160008201805461178390614a77565b80601f01602080910402602001604051908101604052809291908181526020018280546117af90614a77565b80156117fc5780601f106117d1576101008083540402835291602001916117fc565b820191906000526020600020905b8154815290600101906020018083116117df57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054806020026020016040519081016040528092919081815260200182805480156118e057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611896575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015611a32578382906000526020600020906003020160405180606001604052908160008201805461194190614a77565b80601f016020809104026020016040519081016040528092919081815260200182805461196d90614a77565b80156119ba5780601f1061198f576101008083540402835291602001916119ba565b820191906000526020600020905b81548152906001019060200180831161199d57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815250508152602001906001019061190e565b505050508152602001600482015481525050878281518110611a5757611a5661489f565b5b6020026020010181905250806001019050611733565b5085601054601154601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169550955095509550505090919293565b600e8181548110611ab857600080fd5b906000526020600020016000915090505481565b818160066000019182611ae0929190614f4e565b5033600660010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b6006600201908054611b3a929190613299565b50601060008154611b4a90614aa8565b9190508190556006600401819055506006600f6000601054815260200190815260200160002060008201816000019081611b849190614e5b565b506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820181600201908054611c029291906132eb565b506003820181600301908054611c1992919061333d565b5060048201548160040155905050600e6010549080600181540180825580915050600190039060005260206000200160009091909190915055611c7033601054600160405180602001604052806000815250612ad0565b5050565b60008273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611cf057600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050611d70565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6000600f6000838152602001908152602001600020600201805480602002602001604051908101604052809291908181526020018280548015611e0e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611dc4575b5050505050905060008151905060008060005b83811015611ec5573373ffffffffffffffffffffffffffffffffffffffff16600f60008881526020019081526020016000206002018281548110611e6857611e6761489f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611eba5760019250809150611ec5565b806001019050611e21565b5081611f4757600f6000868152602001908152602001600020600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612068565b60008190505b600184611f5a91906148fd565b811015611fe05784600182611f6f9190614931565b81518110611f8057611f7f61489f565b5b6020026020010151858281518110611f9b57611f9a61489f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806001019050611f4d565b5083600f6000878152602001908152602001600020600201908051906020019061200b92919061341b565b50600f600086815260200190815260200160002060020180548061203257612031614987565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b5050505050565b612077612389565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120dd90615090565b60405180910390fd5b6120ef816121d7565b50565b3373ffffffffffffffffffffffffffffffffffffffff16600f600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218d906150fc565b60405180910390fd5b8181600f600086815260200190815260200160002060000191826121bb929190614f4e565b50505050565b6121d46121cc6124d3565b8260006124db565b50565b6121df61107d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146122d35760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505b50565b806001600084815260200190815260200160002090816122f69190615177565b50817fcdf4e344c0d23d4cdd0474039d176c55b19d531070dbe17856bfb993a5b5720b60405160405180910390a25050565b600063714df77c60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612382575061238182612c3a565b5b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff166123a861107d565b73ffffffffffffffffffffffffffffffffffffffff16146123fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f590615295565b60405180910390fd5b565b7fdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af160001b820361245c576040517f85c169bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db93275660001b82036124b8576040517f76755b3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6124c282826122d6565b5050565b6000600182019050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612541576040517f6355e76600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603156126ba5780600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000811461265e57808373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fd66aff874162a96578e919097b6f6d153dfd89a5cec41bb331fdb0c4aec16e2c60405160405180910390a46126b9565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa160405160405180910390a35b5b505050565b60606001600083815260200190815260200160002080546126df90614a77565b80601f016020809104026020016040519081016040528092919081815260200182805461270b90614a77565b80156127585780601f1061272d57610100808354040283529160200191612758565b820191906000526020600020905b81548152906001019060200180831161273b57829003601f168201915b50505050509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806127cb5750600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15612802576040517fd2d5ec3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508084111561288f578086856040517f08d47949000000000000000000000000000000000000000000000000000000008152600401612886939291906152b5565b60405180910390fd5b60006128996124d3565b90506128a6878787612ca4565b84600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128f591906148fd565b9250508190555084600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461294b9190614931565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a68888886040516129ca939291906152ec565b60405180910390a46129de87878786612d45565b6129eb8787878787612e34565b50505050505050565b600080600090505b600f600085815260200190815260200160002060030180549050811015612ac95782600f60008681526020019081526020016000206003018281548110612a4657612a4561489f565b5b90600052602060002090600302016002015403612abe57600f60008581526020019081526020016000206003018181548110612a8557612a8461489f565b5b906000526020600020906003020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150612ac9565b8060010190506129fc565b5092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612b36576040517fd2d5ec3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612b406124d3565b9050612b4e60008686612ca4565b83600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b9d9190614931565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f3997e418d2cef0b3b0e907b1e39605c3f7d32dbd061e82ea5b4a770d46a160a6878787604051612c1d939291906152ec565b60405180910390a4612c33600086868686612e34565b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612cf2578060036000828254612cea9190614931565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612d40578060036000828254612d3891906148fd565b925050819055505b505050565b612d5684636bb56a1460e01b612fc7565b15612e2e57600084848484604051602001612d7494939291906153cf565b60405160208183030381529060405290508473ffffffffffffffffffffffffffffffffffffffff16636bb56a147f40b8bec57d7b5ff0dbd9e9acd0a47dfeb0101e1a203766f5ccab00445fbf39e960001b836040518363ffffffff1660e01b8152600401612de3929190615428565b6000604051808303816000875af1158015612e02573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612e2b91906154c8565b50505b50505050565b612e4584636bb56a1460e01b612fc7565b15612f2157600085858584604051602001612e6394939291906153cf565b60405160208183030381529060405290508473ffffffffffffffffffffffffffffffffffffffff16636bb56a147fdbe2c314e1aee2970c72666f2ebe8933a8575263ea71e5ff6a9178e95d47a26f60001b836040518363ffffffff1660e01b8152600401612ed2929190615428565b6000604051808303816000875af1158015612ef1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612f1a91906154c8565b5050612fc0565b81612fbf5760008473ffffffffffffffffffffffffffffffffffffffff163b14612f8257836040517fa608fbb6000000000000000000000000000000000000000000000000000000008152600401612f799190614253565b60405180910390fd5b836040517f26c247f4000000000000000000000000000000000000000000000000000000008152600401612fb69190614253565b60405180910390fd5b5b5050505050565b6000806301ffc9a760e01b83604051602401612fe39190615520565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000808573ffffffffffffffffffffffffffffffffffffffff166175308460405161306d919061553b565b6000604051808303818686fa925050503d80600081146130a9576040519150601f19603f3d011682016040523d82523d6000602084013e6130ae565b606091505b50915091506020815110156130c957600093505050506130ec565b8180156130e65750808060200190518101906130e59190615567565b5b93505050505b92915050565b82805482825590600052602060002090810192821561312e579160200282015b8281111561312d578251825591602001919060010190613112565b5b50905061313b91906134a5565b5090565b604051806060016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b8280548282559060005260206000209060030281019282156132435760005260206000209160030282015b82811115613242578282600082018160000190816131bf9190614e5b565b506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600282015481600201555050916003019190600301906131a1565b5b50905061325091906134c2565b5090565b6040518060a0016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b8280548282559060005260206000209081019282156132da5760005260206000209182015b828111156132d95782548255916001019190600101906132be565b5b5090506132e791906134a5565b5090565b82805482825590600052602060002090810192821561332c5760005260206000209182015b8281111561332b578254825591600101919060010190613310565b5b50905061333991906134a5565b5090565b82805482825590600052602060002090600302810192821561340a5760005260206000209160030282015b82811115613409578282600082018160000190816133869190614e5b565b506001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028201548160020155505091600301919060030190613368565b5b50905061341791906134c2565b5090565b828054828255906000526020600020908101928215613494579160200282015b828111156134935782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061343b565b5b5090506134a191906134a5565b5090565b5b808211156134be5760008160009055506001016134a6565b5090565b5b8082111561351457600080820160006134dc9190613518565b6001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055506003016134c3565b5090565b50805461352490614a77565b6000825580601f106135365750613555565b601f01602090049060005260206000209081019061355491906134a5565b5b50565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6135a18161356c565b81146135ac57600080fd5b50565b6000813590506135be81613598565b92915050565b6000602082840312156135da576135d9613562565b5b60006135e8848285016135af565b91505092915050565b60008115159050919050565b613606816135f1565b82525050565b600060208201905061362160008301846135fd565b92915050565b6000819050919050565b61363a81613627565b811461364557600080fd5b50565b60008135905061365781613631565b92915050565b60006020828403121561367357613672613562565b5b600061368184828501613648565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136d88261368f565b810181811067ffffffffffffffff821117156136f7576136f66136a0565b5b80604052505050565b600061370a613558565b905061371682826136cf565b919050565b600067ffffffffffffffff821115613736576137356136a0565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61375f8161374c565b811461376a57600080fd5b50565b60008135905061377c81613756565b92915050565b60006137956137908461371b565b613700565b905080838252602082019050602084028301858111156137b8576137b7613747565b5b835b818110156137e157806137cd888261376d565b8452602084019350506020810190506137ba565b5050509392505050565b600082601f830112613800576137ff61368a565b5b8135613810848260208601613782565b91505092915050565b600067ffffffffffffffff821115613834576138336136a0565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115613865576138646136a0565b5b61386e8261368f565b9050602081019050919050565b82818337600083830152505050565b600061389d6138988461384a565b613700565b9050828152602081018484840111156138b9576138b8613845565b5b6138c484828561387b565b509392505050565b600082601f8301126138e1576138e061368a565b5b81356138f184826020860161388a565b91505092915050565b600061390d61390884613819565b613700565b905080838252602082019050602084028301858111156139305761392f613747565b5b835b8181101561397757803567ffffffffffffffff8111156139555761395461368a565b5b80860161396289826138cc565b85526020850194505050602081019050613932565b5050509392505050565b600082601f8301126139965761399561368a565b5b81356139a68482602086016138fa565b91505092915050565b600080604083850312156139c6576139c5613562565b5b600083013567ffffffffffffffff8111156139e4576139e3613567565b5b6139f0858286016137eb565b925050602083013567ffffffffffffffff811115613a1157613a10613567565b5b613a1d85828601613981565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613a61578082015181840152602081019050613a46565b83811115613a70576000848401525b50505050565b6000613a8182613a27565b613a8b8185613a32565b9350613a9b818560208601613a43565b613aa48161368f565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613ada82613aaf565b9050919050565b613aea81613acf565b82525050565b613af981613627565b82525050565b60006060820190508181036000830152613b198186613a76565b9050613b286020830185613ae1565b613b356040830184613af0565b949350505050565b6000602082019050613b526000830184613af0565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000613ba082613a27565b613baa8185613b84565b9350613bba818560208601613a43565b613bc38161368f565b840191505092915050565b613bd781613acf565b82525050565b613be681613627565b82525050565b60006060830160008301518482036000860152613c098282613b95565b9150506020830151613c1e6020860182613bce565b506040830151613c316040860182613bdd565b508091505092915050565b6000613c488383613bec565b905092915050565b6000602082019050919050565b6000613c6882613b58565b613c728185613b63565b935083602082028501613c8485613b74565b8060005b85811015613cc05784840389528151613ca18582613c3c565b9450613cac83613c50565b925060208a01995050600181019050613c88565b50829750879550505050505092915050565b60006020820190508181036000830152613cec8184613c5d565b905092915050565b600080fd5b60008083601f840112613d0f57613d0e61368a565b5b8235905067ffffffffffffffff811115613d2c57613d2b613cf4565b5b602083019150836001820283011115613d4857613d47613747565b5b9250929050565b600080600060408486031215613d6857613d67613562565b5b6000613d7686828701613648565b935050602084013567ffffffffffffffff811115613d9757613d96613567565b5b613da386828701613cf9565b92509250509250925092565b613db881613acf565b8114613dc357600080fd5b50565b600081359050613dd581613daf565b92915050565b60008060408385031215613df257613df1613562565b5b6000613e0085828601613dc6565b9250506020613e1185828601613648565b9150509250929050565b600060208284031215613e3157613e30613562565b5b600082013567ffffffffffffffff811115613e4f57613e4e613567565b5b613e5b848285016137eb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b6000613eb782613e90565b613ec18185613e9b565b9350613ed1818560208601613a43565b613eda8161368f565b840191505092915050565b6000613ef18383613eac565b905092915050565b6000602082019050919050565b6000613f1182613e64565b613f1b8185613e6f565b935083602082028501613f2d85613e80565b8060005b85811015613f695784840389528151613f4a8582613ee5565b9450613f5583613ef9565b925060208a01995050600181019050613f31565b50829750879550505050505092915050565b60006020820190508181036000830152613f958184613f06565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613fd58383613bce565b60208301905092915050565b6000602082019050919050565b6000613ff982613f9d565b6140038185613fa8565b935061400e83613fb9565b8060005b8381101561403f5781516140268882613fc9565b975061403183613fe1565b925050600181019050614012565b5085935050505092915050565b600060208201905081810360008301526140668184613fee565b905092915050565b60006020828403121561408457614083613562565b5b60006140928482850161376d565b91505092915050565b600082825260208201905092915050565b60006140b782613e90565b6140c1818561409b565b93506140d1818560208601613a43565b6140da8161368f565b840191505092915050565b600060208201905081810360008301526140ff81846140ac565b905092915050565b60006020828403121561411d5761411c613562565b5b600061412b84828501613dc6565b91505092915050565b61413d816135f1565b811461414857600080fd5b50565b60008135905061415a81614134565b92915050565b600080600080600060a0868803121561417c5761417b613562565b5b600061418a88828901613dc6565b955050602061419b88828901613dc6565b94505060406141ac88828901613648565b93505060606141bd8882890161414b565b925050608086013567ffffffffffffffff8111156141de576141dd613567565b5b6141ea888289016138cc565b9150509295509295909350565b6000806040838503121561420e5761420d613562565b5b600061421c8582860161376d565b925050602083013567ffffffffffffffff81111561423d5761423c613567565b5b614249858286016138cc565b9150509250929050565b60006020820190506142686000830184613ae1565b92915050565b6000806040838503121561428557614284613562565b5b600061429385828601613648565b92505060206142a485828601613648565b9150509250929050565b600067ffffffffffffffff8211156142c9576142c86136a0565b5b602082029050602081019050919050565b60006142ed6142e8846142ae565b613700565b905080838252602082019050602084028301858111156143105761430f613747565b5b835b8181101561433957806143258882613dc6565b845260208401935050602081019050614312565b5050509392505050565b600082601f8301126143585761435761368a565b5b81356143688482602086016142da565b91505092915050565b600067ffffffffffffffff82111561438c5761438b6136a0565b5b602082029050602081019050919050565b60006143b06143ab84614371565b613700565b905080838252602082019050602084028301858111156143d3576143d2613747565b5b835b818110156143fc57806143e88882613648565b8452602084019350506020810190506143d5565b5050509392505050565b600082601f83011261441b5761441a61368a565b5b813561442b84826020860161439d565b91505092915050565b600080600080600060a086880312156144505761444f613562565b5b600086013567ffffffffffffffff81111561446e5761446d613567565b5b61447a88828901614343565b955050602086013567ffffffffffffffff81111561449b5761449a613567565b5b6144a788828901614343565b945050604086013567ffffffffffffffff8111156144c8576144c7613567565b5b6144d488828901614406565b93505060606144e58882890161414b565b925050608086013567ffffffffffffffff81111561450657614505613567565b5b61451288828901613981565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061456782613f9d565b614571818561454b565b935061457c83613fb9565b8060005b838110156145ad5781516145948882613fc9565b975061459f83613fe1565b925050600181019050614580565b5085935050505092915050565b600082825260208201905092915050565b60006145d682613b58565b6145e081856145ba565b9350836020820285016145f285613b74565b8060005b8581101561462e578484038952815161460f8582613c3c565b945061461a83613c50565b925060208a019950506001810190506145f6565b50829750879550505050505092915050565b600060a083016000830151848203600086015261465d8282613b95565b91505060208301516146726020860182613bce565b506040830151848203604086015261468a828261455c565b915050606083015184820360608601526146a482826145cb565b91505060808301516146b96080860182613bdd565b508091505092915050565b60006146d08383614640565b905092915050565b6000602082019050919050565b60006146f08261451f565b6146fa818561452a565b93508360208202850161470c8561453b565b8060005b85811015614748578484038952815161472985826146c4565b9450614734836146d8565b925060208a01995050600181019050614710565b50829750879550505050505092915050565b6000608082019050818103600083015261477481876146e5565b90506147836020830186613af0565b6147906040830185613af0565b61479d6060830184613ae1565b95945050505050565b600080602083850312156147bd576147bc613562565b5b600083013567ffffffffffffffff8111156147db576147da613567565b5b6147e785828601613cf9565b92509250509250929050565b6000806040838503121561480a57614809613562565b5b600061481885828601613dc6565b925050602061482985828601613dc6565b9150509250929050565b7f617574686f72206f722061646d696e2063616e2064656c65746520706f737400600082015250565b6000614869601f83613a32565b915061487482614833565b602082019050919050565b600060208201905081810360008301526148988161485c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061490882613627565b915061491383613627565b925082821015614926576149256148ce565b5b828203905092915050565b600061493c82613627565b915061494783613627565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561497c5761497b6148ce565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4b657973206c656e677468206e6f7420657175616c20746f2076616c7565732060008201527f6c656e6774680000000000000000000000000000000000000000000000000000602082015250565b6000614a12602683613a32565b9150614a1d826149b6565b604082019050919050565b60006020820190508181036000830152614a4181614a05565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614a8f57607f821691505b602082108103614aa257614aa1614a48565b5b50919050565b6000614ab382613627565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614ae557614ae46148ce565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614b527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614b15565b614b5c8683614b15565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614b99614b94614b8f84613627565b614b74565b613627565b9050919050565b6000819050919050565b614bb383614b7e565b614bc7614bbf82614ba0565b848454614b22565b825550505050565b600090565b614bdc614bcf565b614be7818484614baa565b505050565b5b81811015614c0b57614c00600082614bd4565b600181019050614bed565b5050565b601f821115614c5057614c2181614af0565b614c2a84614b05565b81016020851015614c39578190505b614c4d614c4585614b05565b830182614bec565b50505b505050565b600082821c905092915050565b6000614c7360001984600802614c55565b1980831691505092915050565b6000614c8c8383614c62565b9150826002028217905092915050565b614ca582613a27565b67ffffffffffffffff811115614cbe57614cbd6136a0565b5b614cc88254614a77565b614cd3828285614c0f565b600060209050601f831160018114614d065760008415614cf4578287015190505b614cfe8582614c80565b865550614d66565b601f198416614d1486614af0565b60005b82811015614d3c57848901518255600182019150602085019450602081019050614d17565b86831015614d595784890151614d55601f891682614c62565b8355505b6001600288020188555050505b505050505050565b6000608082019050614d836000830187613ae1565b614d906020830186613af0565b614d9d6040830185613ae1565b614daa6060830184613af0565b95945050505050565b7f4f6e6c7920706f737420617574686f72206f7220636f6d6d656e746f7220636160008201527f6e2072656d6f766520636f6d6d656e7400000000000000000000000000000000602082015250565b6000614e0f603083613a32565b9150614e1a82614db3565b604082019050919050565b60006020820190508181036000830152614e3e81614e02565b9050919050565b600081549050614e5481614a77565b9050919050565b818103614e69575050614f41565b614e7282614e45565b67ffffffffffffffff811115614e8b57614e8a6136a0565b5b614e958254614a77565b614ea0828285614c0f565b6000601f831160018114614ecf5760008415614ebd578287015490505b614ec78582614c80565b865550614f3a565b601f198416614edd87614af0565b9650614ee886614af0565b60005b82811015614f1057848901548255600182019150600185019450602081019050614eeb565b86831015614f2d5784890154614f29601f891682614c62565b8355505b6001600288020188555050505b5050505050505b565b600082905092915050565b614f588383614f43565b67ffffffffffffffff811115614f7157614f706136a0565b5b614f7b8254614a77565b614f86828285614c0f565b6000601f831160018114614fb55760008415614fa3578287013590505b614fad8582614c80565b865550615015565b601f198416614fc386614af0565b60005b82811015614feb57848901358255600182019150602085019450602081019050614fc6565b868310156150085784890135615004601f891682614c62565b8355505b6001600288020188555050505b50505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061507a602683613a32565b91506150858261501e565b604082019050919050565b600060208201905081810360008301526150a98161506d565b9050919050565b7f4f6e6c7920617574686f722063616e206564697420706f737400000000000000600082015250565b60006150e6601983613a32565b91506150f1826150b0565b602082019050919050565b60006020820190508181036000830152615115816150d9565b9050919050565b60008190508160005260206000209050919050565b601f821115615172576151438161511c565b61514c84614b05565b8101602085101561515b578190505b61516f61516785614b05565b830182614bec565b50505b505050565b61518082613e90565b67ffffffffffffffff811115615199576151986136a0565b5b6151a38254614a77565b6151ae828285615131565b600060209050601f8311600181146151e157600084156151cf578287015190505b6151d98582614c80565b865550615241565b601f1984166151ef8661511c565b60005b82811015615217578489015182556001820191506020850194506020810190506151f2565b868310156152345784890151615230601f891682614c62565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061527f602083613a32565b915061528a82615249565b602082019050919050565b600060208201905081810360008301526152ae81615272565b9050919050565b60006060820190506152ca6000830186613af0565b6152d76020830185613ae1565b6152e46040830184613af0565b949350505050565b60006060820190506153016000830186613af0565b61530e60208301856135fd565b818103604083015261532081846140ac565b9050949350505050565b60008160601b9050919050565b60006153428261532a565b9050919050565b600061535482615337565b9050919050565b61536c61536782613acf565b615349565b82525050565b6000819050919050565b61538d61538882613627565b615372565b82525050565b600081905092915050565b60006153a982613e90565b6153b38185615393565b93506153c3818560208601613a43565b80840191505092915050565b60006153db828761535b565b6014820191506153eb828661535b565b6014820191506153fb828561537c565b60208201915061540b828461539e565b915081905095945050505050565b6154228161374c565b82525050565b600060408201905061543d6000830185615419565b818103602083015261544f81846140ac565b90509392505050565b600061546b6154668461384a565b613700565b90508281526020810184848401111561548757615486613845565b5b615492848285613a43565b509392505050565b600082601f8301126154af576154ae61368a565b5b81516154bf848260208601615458565b91505092915050565b6000602082840312156154de576154dd613562565b5b600082015167ffffffffffffffff8111156154fc576154fb613567565b5b6155088482850161549a565b91505092915050565b61551a8161356c565b82525050565b60006020820190506155356000830184615511565b92915050565b6000615547828461539e565b915081905092915050565b60008151905061556181614134565b92915050565b60006020828403121561557d5761557c613562565b5b600061558b84828501615552565b9150509291505056fea2646970667358221220f8628cbcfeb8413ac8b67d5081224fb023995e2efe7f3cf8dcdbb2397ce1df0e64736f6c634300080f0033",
  "devdoc": {
    "errors": {
      "LSP4TokenNameNotEditable()": [
        {
          "details": "Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed.      The `LSP4TokenName` data key is located inside the ERC725Y key-value store of the digital asset contract.      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed."
        }
      ],
      "LSP4TokenSymbolNotEditable()": [
        {
          "details": "Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed.      The `LSP4TokenSymbol` data key is located inside the ERC725Y key-value store of the digital asset contract.      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "authorizeOperator(address,uint256)": {
        "details": "Sets `amount` as the amount of tokens `operator` address has access to from callers tokens. See {isOperatorFor}. Requirements - `operator` cannot be the zero address. Emits an {AuthorizedOperator} event.",
        "params": {
          "amount": "The amount of tokens operator has access to.",
          "operator": "The address to authorize as an operator."
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens owned by `tokenOwner`.",
        "params": {
          "tokenOwner": "The address to query"
        },
        "returns": {
          "_0": "The number of tokens owned by this address"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation If the contract represents a NFT then 0 SHOULD be used, otherwise 18 is the common value NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {balanceOf} and {transfer}."
      },
      "getData(bytes32)": {
        "params": {
          "dataKey": "The key which value to retrieve"
        },
        "returns": {
          "dataValue": "The data stored at the key"
        }
      },
      "getData(bytes32[])": {
        "params": {
          "dataKeys": "The array of keys which values to retrieve"
        },
        "returns": {
          "dataValues": "The array of data stored at multiple keys"
        }
      },
      "isOperatorFor(address,address)": {
        "details": "Returns amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners. The tokenOwner is their own operator.",
        "params": {
          "operator": "The address to query operator status for.",
          "tokenOwner": "The token owner."
        },
        "returns": {
          "_0": "The amount of tokens `operator` address has access to from `tokenOwner`."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeOperator(address)": {
        "details": "Removes `operator` address as an operator of callers tokens. See {isOperatorFor}. Requirements - `operator` cannot be the zero address. Emits a {RevokedOperator} event.",
        "params": {
          "operator": "The address to revoke as an operator."
        }
      },
      "setData(bytes32,bytes)": {
        "params": {
          "dataKey": "The key to retrieve stored value",
          "dataValue": "The value to set SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event."
        }
      },
      "setData(bytes32[],bytes[])": {
        "details": "Sets array of data for multiple given `dataKeys` SHOULD only be callable by the owner of the contract set via ERC173 Emits a {DataChanged} event.",
        "params": {
          "dataKeys": "The array of data keys for values to set",
          "dataValues": "The array of values to set"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply()": {
        "details": "Returns the number of existing tokens.",
        "returns": {
          "_0": "The number of existing tokens"
        }
      },
      "transfer(address,address,uint256,bool,bytes)": {
        "details": "Transfers `amount` of tokens from `from` to `to`. The `force` parameter will be used when notifying the token sender and receiver. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `amount` tokens must be owned by `from`. - If the caller is not `from`, it must be an operator for `from` with access to at least `amount` tokens. Emits a {Transfer} event.",
        "params": {
          "amount": "The amount of tokens to transfer.",
          "data": "Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.",
          "force": "When set to TRUE, to may be any address but when set to FALSE to must be a contract that supports LSP1 UniversalReceiver",
          "from": "The sending address.",
          "to": "The receiving address."
        }
      },
      "transferBatch(address[],address[],uint256[],bool,bytes[])": {
        "details": "Transfers many tokens based on the list `from`, `to`, `amount`. If any transfer fails the call will revert. Requirements: - `from`, `to`, `amount` lists are the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `amount` tokens must be owned by `from`. - If the caller is not `from`, it must be an operator for `from` with access to at least `amount` tokens. Emits {Transfer} events.",
        "params": {
          "amount": "The amount of tokens to transfer.",
          "data": "Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.",
          "force": "When set to TRUE, to may be any address but when set to FALSE to must be a contract that supports LSP1 UniversalReceiver",
          "from": "The list of sending addresses.",
          "to": "The list of receiving addresses."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DataChanged(bytes32)": {
        "notice": "Emitted when data at a key is changed"
      }
    },
    "kind": "user",
    "methods": {
      "getData(bytes32)": {
        "notice": "Gets singular data at a given `dataKey`"
      },
      "getData(bytes32[])": {
        "notice": "Gets array of data for multiple given keys"
      },
      "setData(bytes32,bytes)": {
        "notice": "Sets singular data for a given `dataKey`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 278,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 50,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "store",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 1028,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "_isNFT",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1030,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "_existingTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1034,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "_tokenOwnerBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1040,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "_operatorAuthorizedAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2750,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "latestPost",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Post)2747_storage"
      },
      {
        "astId": 2753,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "emptyLikesArr",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2757,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "emptyCommentsArr",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Comment)2733_storage)dyn_storage"
      },
      {
        "astId": 2761,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "tempCommentsArr",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Comment)2733_storage)dyn_storage"
      },
      {
        "astId": 2764,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "postsIds",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2769,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "postByTokenId",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Post)2747_storage)"
      },
      {
        "astId": 2771,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "postsCounter",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2773,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "commentsCounter",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2775,
        "contract": "contracts/ForumNFT.sol:ForumNFT",
        "label": "admin",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Comment)2733_storage)dyn_storage": {
        "base": "t_struct(Comment)2733_storage",
        "encoding": "dynamic_array",
        "label": "struct ForumNFT.Comment[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_struct(Post)2747_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ForumNFT.Post)",
        "numberOfBytes": "32",
        "value": "t_struct(Post)2747_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Comment)2733_storage": {
        "encoding": "inplace",
        "label": "struct ForumNFT.Comment",
        "members": [
          {
            "astId": 2728,
            "contract": "contracts/ForumNFT.sol:ForumNFT",
            "label": "cid",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2730,
            "contract": "contracts/ForumNFT.sol:ForumNFT",
            "label": "commentor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2732,
            "contract": "contracts/ForumNFT.sol:ForumNFT",
            "label": "id",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Post)2747_storage": {
        "encoding": "inplace",
        "label": "struct ForumNFT.Post",
        "members": [
          {
            "astId": 2735,
            "contract": "contracts/ForumNFT.sol:ForumNFT",
            "label": "cid",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2737,
            "contract": "contracts/ForumNFT.sol:ForumNFT",
            "label": "author",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2740,
            "contract": "contracts/ForumNFT.sol:ForumNFT",
            "label": "likes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 2744,
            "contract": "contracts/ForumNFT.sol:ForumNFT",
            "label": "comments",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(Comment)2733_storage)dyn_storage"
          },
          {
            "astId": 2746,
            "contract": "contracts/ForumNFT.sol:ForumNFT",
            "label": "id",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}